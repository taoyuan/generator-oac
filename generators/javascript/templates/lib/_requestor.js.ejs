<%- include('../licenseInfo') -%>

const axios = require("axios");
const debug = require("debug");
const qs = require('qs');

const log = debug('<%- appName %>:request');

/**
 * Requestor wraps the logic for making http requests to the API
 */
class Requestor {
	/**
	 * Either a username and password or an oauth token for Github
	 * @typedef {Object} Requestor.auth
	 * @prop {token} [token] - an OAuth token
	 * @prop {String} [username] - the Github username
	 * @prop {String} [password] - the user's password
	 */
	/**
	 * Initialize the http internals.
	 * @param {Object} opts
	 * @param {Requestor.auth} [opts.auth] - the credentials to authenticate to Github. If auth is
	 *   not provided request will be made unauthenticated
	 * @param {String} [opts.apiBase=<%- baseUrl %>] - the base API URL
	 */
	constructor(opts = {}) {
		this.__auth = null;
		this.configure(opts);
	}

	configure(opts = {}) {
	  opts = this.__opts = Object.assign({}, this.__opts, opts);
		opts.baseURL = opts.baseURL || opts.baseUrl || opts.base || '<%- baseUrl %>';
		if (opts.auth) {
			this.auth(opts.auth);
		}
		this.__fetch = axios.create(opts);
	}

	/**
	 * @property defaults defaults for axios instance
	 */
	get defaults() {
	  return this.__fetch.defaults;
	}

	auth(auth) {
	  if (typeof auth === 'string') {
	    auth = {token: auth};
		}
		this.__auth = auth;
	}

	/**
	 * Compute the headers required for an API request.
	 * @private
	 * @param {Object} [headers] - the accept header for the request
	 * @return {Object} - the headers to use in the request
	 */
	_getRequestHeaders(headers = {}) {
		if (this.__auth && !this.__auth.query && this.__auth.token) {
			if (this.__auth.name) {
				headers[this.__auth.name] = this.__auth.token;
			} else {
				headers['Authorization'] = this.__auth.token;
			}
		}
		return headers;
	}

	/**
	 * A function that receives the result of the API request.
	 * @callback Requestor.callback
	 * @param {Requestor.Error} error - the error returned by the API or `null`
	 * @param {(Object|true)} result - the data returned by the API or `true` if the API returns `204 No Content`
	 * @param {Object} request - the raw {@linkcode https://github.com/mzabriskie/axios#response-schema Response}
	 */
	/**
	 * Make a request.
	 * @param {String|Object} path - the path for the request
	 * @param {Object} options
	 * @param {String} [options.path] - the method for the request (GET, PUT, POST, DELETE)
	 * @param {String} options.method - the method for the request (GET, PUT, POST, DELETE)
	 * @param {*} [options.data] - the data to send to the server. For HTTP methods that don't have a body the data
	 *   will be sent as query parameters
	 * @param {*} [options.form]
	 * @param {boolean} [options.raw=false] - if the request should be sent as raw. If this is a falsy value then the
	 *   request will be made as JSON
	 * @return {Promise} - the Promise for the http request
	 */
	request(path, options = {}) {
		if (typeof path === 'object') {
			options = path;
			path = options.path;
		}
		let {method, headers, params, data, form, raw} = options;

		if (this.__auth && this.__auth.query) {
			params = params || {};
			params[this.__auth.name || 'access_token'] = this.__auth.token;
		}

		const url = path;
		const responseType = raw ? 'text' : 'json';

		headers = this._getRequestHeaders(headers);
		if (form) {
		  headers['Content-Type'] = 'application/x-www-form-urlencoded';
		  data = qs.stringify(form);
		}

		const config = {url, method, headers, params, data, responseType};

		log(`${method} to ${url}`);
		return this.__fetch.request(config).then(response => {
			if (response.data) {
				return response.data;
			}
			if (response.statusCode === 204) {
				return {response: response};
			}
			return {response: response, body: response.body};
		});
	}
}

module.exports = Requestor;
