<%- include('../licenseInfo') -%>
'use strict';

/**
 * Returns a string representation for an actual parameter.
 * @param param The actual parameter.
 * @returns {String} The string representation of <code>param</code>.
 */
function paramToString(param) {
	if (param === undefined || param === null) {
		return '';
	}
	if (param instanceof Date) {
		return param.toJSON();
	}
	if (typeof param === 'object') {
		return JSON.stringify(param);
	}
	return param.toString();
}
exports.paramToString = paramToString;

/**
 * Builds full URL by appending the given path to the base URL and replacing path parameter place-holders with parameter values.
 * NOTE: query parameters are not handled here.
 * @param {String} path The path to append to the base URL.
 * @param {Object} pathParams The parameter values to append.
 * @returns {String} The encoded path with parameter values substituted.
 */
function buildPath(path, pathParams) {
	if (!path.match(/^\//)) {
		path = '/' + path;
	}
	path = path.replace(/{([\w-]+)}/g, function (fullMatch, key) {
		let value;
		if (pathParams.hasOwnProperty(key)) {
			value = paramToString(pathParams[key]);
		} else {
			value = fullMatch;
		}
		return encodeURIComponent(value);
	});
	return path;
}
exports.buildPath = buildPath;
