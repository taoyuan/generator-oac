{
	"swagger": "2.0",
	"info": {
		"title": "Lyda API",
		"description": "Explorer lyda api.",
		"version": "1.0.0"
	},
	"basePath": "/rest/v1",
	"paths": {
		"/auth/actions": {
			"get": {
				"tags": [
					"Auth"
				],
				"summary": "actions - Get model actions",
				"operationId": "Auth.actions",
				"parameters": [
					{
						"name": "model",
						"in": "query",
						"description": "model name or empty for all models",
						"required": false,
						"type": "string"
					},
					{
						"name": "full",
						"in": "query",
						"description": "true to return full action properties, or only action names",
						"required": false,
						"type": "boolean"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"description": "Return all actions of models",
							"type": "object"
						}
					}
				},
				"deprecated": false
			}
		},
		"/roles/users/{roleIdOrName}": {
			"get": {
				"tags": [
					"Roles"
				],
				"summary": "Find role users by scoped role id or name",
				"operationId": "Roles.findUsers",
				"parameters": [
					{
						"name": "roleIdOrName",
						"in": "path",
						"description": "Role name with scope or role id without scope",
						"required": true,
						"type": "string"
					},
					{
						"name": "scopeType",
						"in": "query",
						"description": "Scope type to find in. It could be \"Org\" or \"Team\"",
						"required": true,
						"type": "string"
					},
					{
						"name": "scopeId",
						"in": "query",
						"description": "Scope id according to scope type",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"type": "array",
							"items": {
								"$ref": "#/definitions/x-any"
							}
						}
					}
				},
				"deprecated": false
			}
		},
		"/roles/org/{orgId}/teams/role/{role}/users": {
			"get": {
				"tags": [
					"Roles"
				],
				"summary": "Find users of Team Role for Org",
				"operationId": "Roles.findOrgTeamRoleUsers",
				"parameters": [
					{
						"name": "orgId",
						"in": "path",
						"description": "Org id",
						"required": true,
						"type": "string"
					},
					{
						"name": "role",
						"in": "path",
						"description": "Role names of team",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"type": "array",
							"items": {
								"$ref": "#/definitions/x-any"
							}
						}
					}
				},
				"deprecated": false
			}
		},
		"/accounts/{id}/accessTokens/{fk}": {
			"get": {
				"tags": [
					"Account"
				],
				"summary": "Find a related item by id for accessTokens.",
				"operationId": "Account.prototype.__findById__accessTokens",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Account id",
						"required": true,
						"type": "string",
						"format": "JSON"
					},
					{
						"name": "fk",
						"in": "path",
						"description": "Foreign key for accessTokens",
						"required": true,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/AccessToken"
						}
					}
				},
				"deprecated": false
			},
			"delete": {
				"tags": [
					"Account"
				],
				"summary": "Delete a related item by id for accessTokens.",
				"operationId": "Account.prototype.__destroyById__accessTokens",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Account id",
						"required": true,
						"type": "string",
						"format": "JSON"
					},
					{
						"name": "fk",
						"in": "path",
						"description": "Foreign key for accessTokens",
						"required": true,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"204": {
						"description": "Request was successful"
					}
				},
				"deprecated": false
			},
			"put": {
				"tags": [
					"Account"
				],
				"summary": "Update a related item by id for accessTokens.",
				"operationId": "Account.prototype.__updateById__accessTokens",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Account id",
						"required": true,
						"type": "string",
						"format": "JSON"
					},
					{
						"name": "fk",
						"in": "path",
						"description": "Foreign key for accessTokens",
						"required": true,
						"type": "string",
						"format": "JSON"
					},
					{
						"name": "data",
						"in": "body",
						"required": false,
						"schema": {
							"$ref": "#/definitions/AccessToken"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/AccessToken"
						}
					}
				},
				"deprecated": false
			}
		},
		"/accounts/{id}/repos/{fk}": {
			"get": {
				"tags": [
					"Account"
				],
				"summary": "Find a related item by id for repos.",
				"operationId": "Account.prototype.__findById__repos",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Account id",
						"required": true,
						"type": "string",
						"format": "JSON"
					},
					{
						"name": "fk",
						"in": "path",
						"description": "Foreign key for repos",
						"required": true,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/Repo"
						}
					}
				},
				"deprecated": false
			},
			"delete": {
				"tags": [
					"Account"
				],
				"summary": "Delete a related item by id for repos.",
				"operationId": "Account.prototype.__destroyById__repos",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Account id",
						"required": true,
						"type": "string",
						"format": "JSON"
					},
					{
						"name": "fk",
						"in": "path",
						"description": "Foreign key for repos",
						"required": true,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"204": {
						"description": "Request was successful"
					}
				},
				"deprecated": false
			},
			"put": {
				"tags": [
					"Account"
				],
				"summary": "Update a related item by id for repos.",
				"operationId": "Account.prototype.__updateById__repos",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Account id",
						"required": true,
						"type": "string",
						"format": "JSON"
					},
					{
						"name": "fk",
						"in": "path",
						"description": "Foreign key for repos",
						"required": true,
						"type": "string",
						"format": "JSON"
					},
					{
						"name": "data",
						"in": "body",
						"required": false,
						"schema": {
							"$ref": "#/definitions/Repo"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/Repo"
						}
					}
				},
				"deprecated": false
			}
		},
		"/accounts/{id}/namespace": {
			"get": {
				"tags": [
					"Account"
				],
				"summary": "Fetches hasOne relation namespace.",
				"operationId": "Account.prototype.__get__namespace",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Account id",
						"required": true,
						"type": "string",
						"format": "JSON"
					},
					{
						"name": "refresh",
						"in": "query",
						"required": false,
						"type": "boolean"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/Namespace"
						}
					}
				},
				"deprecated": false
			},
			"post": {
				"tags": [
					"Account"
				],
				"summary": "Creates a new instance in namespace of this model.",
				"operationId": "Account.prototype.__create__namespace",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Account id",
						"required": true,
						"type": "string",
						"format": "JSON"
					},
					{
						"name": "data",
						"in": "body",
						"required": false,
						"schema": {
							"$ref": "#/definitions/Namespace"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/Namespace"
						}
					}
				},
				"deprecated": false
			},
			"put": {
				"tags": [
					"Account"
				],
				"summary": "Update namespace of this model.",
				"operationId": "Account.prototype.__update__namespace",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Account id",
						"required": true,
						"type": "string",
						"format": "JSON"
					},
					{
						"name": "data",
						"in": "body",
						"required": false,
						"schema": {
							"$ref": "#/definitions/Namespace"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/Namespace"
						}
					}
				},
				"deprecated": false
			},
			"delete": {
				"tags": [
					"Account"
				],
				"summary": "Deletes namespace of this model.",
				"operationId": "Account.prototype.__destroy__namespace",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Account id",
						"required": true,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"204": {
						"description": "Request was successful"
					}
				},
				"deprecated": false
			}
		},
		"/accounts/{id}/accessTokens": {
			"get": {
				"tags": [
					"Account"
				],
				"summary": "Queries accessTokens of Account.",
				"operationId": "Account.prototype.__get__accessTokens",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Account id",
						"required": true,
						"type": "string",
						"format": "JSON"
					},
					{
						"name": "filter",
						"in": "query",
						"required": false,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"type": "array",
							"items": {
								"$ref": "#/definitions/AccessToken"
							}
						}
					}
				},
				"deprecated": false
			},
			"post": {
				"tags": [
					"Account"
				],
				"summary": "Creates a new instance in accessTokens of this model.",
				"operationId": "Account.prototype.__create__accessTokens",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Account id",
						"required": true,
						"type": "string",
						"format": "JSON"
					},
					{
						"name": "data",
						"in": "body",
						"required": false,
						"schema": {
							"$ref": "#/definitions/AccessToken"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/AccessToken"
						}
					}
				},
				"deprecated": false
			},
			"delete": {
				"tags": [
					"Account"
				],
				"summary": "Deletes all accessTokens of this model.",
				"operationId": "Account.prototype.__delete__accessTokens",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Account id",
						"required": true,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"204": {
						"description": "Request was successful"
					}
				},
				"deprecated": false
			}
		},
		"/accounts/{id}/accessTokens/count": {
			"get": {
				"tags": [
					"Account"
				],
				"summary": "Counts accessTokens of Account.",
				"operationId": "Account.prototype.__count__accessTokens",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Account id",
						"required": true,
						"type": "string",
						"format": "JSON"
					},
					{
						"name": "where",
						"in": "query",
						"description": "Criteria to match model instances",
						"required": false,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"type": "object",
							"properties": {
								"count": {
									"type": "number",
									"format": "double"
								}
							}
						}
					}
				},
				"deprecated": false
			}
		},
		"/accounts/{id}/repos": {
			"get": {
				"tags": [
					"Account"
				],
				"summary": "Queries repos of Account.",
				"operationId": "Account.prototype.__get__repos",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Account id",
						"required": true,
						"type": "string",
						"format": "JSON"
					},
					{
						"name": "filter",
						"in": "query",
						"required": false,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"type": "array",
							"items": {
								"$ref": "#/definitions/Repo"
							}
						}
					}
				},
				"deprecated": false
			},
			"post": {
				"tags": [
					"Account"
				],
				"summary": "Creates a new instance in repos of this model.",
				"operationId": "Account.prototype.__create__repos",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Account id",
						"required": true,
						"type": "string",
						"format": "JSON"
					},
					{
						"name": "data",
						"in": "body",
						"required": false,
						"schema": {
							"$ref": "#/definitions/Repo"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/Repo"
						}
					}
				},
				"deprecated": false
			}
		},
		"/accounts/{id}/repos/count": {
			"get": {
				"tags": [
					"Account"
				],
				"summary": "Counts repos of Account.",
				"operationId": "Account.prototype.__count__repos",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Account id",
						"required": true,
						"type": "string",
						"format": "JSON"
					},
					{
						"name": "where",
						"in": "query",
						"description": "Criteria to match model instances",
						"required": false,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"type": "object",
							"properties": {
								"count": {
									"type": "number",
									"format": "double"
								}
							}
						}
					}
				},
				"deprecated": false
			}
		},
		"/accounts": {
			"post": {
				"tags": [
					"Account"
				],
				"summary": "Create a new instance of the model and persist it into the data source.",
				"operationId": "Account.create",
				"parameters": [
					{
						"name": "data",
						"in": "body",
						"description": "Model instance data",
						"required": false,
						"schema": {
							"description": "Model instance data",
							"$ref": "#/definitions/Account"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/Account"
						}
					}
				},
				"deprecated": false
			},
			"patch": {
				"tags": [
					"Account"
				],
				"summary": "Patch an existing model instance or insert a new one into the data source.",
				"operationId": "Account.patchOrCreate",
				"parameters": [
					{
						"name": "data",
						"in": "body",
						"description": "Model instance data",
						"required": false,
						"schema": {
							"description": "Model instance data",
							"$ref": "#/definitions/Account"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/Account"
						}
					}
				},
				"deprecated": false
			},
			"get": {
				"tags": [
					"Account"
				],
				"summary": "Find all instances of the model matched by filter from the data source.",
				"operationId": "Account.find",
				"parameters": [
					{
						"name": "filter",
						"in": "query",
						"description": "Filter defining fields, where, include, order, offset, and limit",
						"required": false,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"type": "array",
							"items": {
								"$ref": "#/definitions/Account"
							}
						}
					}
				},
				"deprecated": false
			}
		},
		"/accounts/{id}/exists": {
			"get": {
				"tags": [
					"Account"
				],
				"summary": "Check whether a model instance exists in the data source.",
				"operationId": "Account.exists__get_accounts_{id}_exists",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Model id",
						"required": true,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"type": "object",
							"properties": {
								"exists": {
									"type": "boolean"
								}
							}
						}
					}
				},
				"deprecated": false
			}
		},
		"/accounts/{id}": {
			"head": {
				"tags": [
					"Account"
				],
				"summary": "Check whether a model instance exists in the data source.",
				"operationId": "Account.exists__head_accounts_{id}",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Model id",
						"required": true,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"type": "object",
							"properties": {
								"exists": {
									"type": "boolean"
								}
							}
						}
					}
				},
				"deprecated": false
			},
			"get": {
				"tags": [
					"Account"
				],
				"summary": "Find a model instance by {{id}} from the data source.",
				"operationId": "Account.findById",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Model id",
						"required": true,
						"type": "string",
						"format": "JSON"
					},
					{
						"name": "filter",
						"in": "query",
						"description": "Filter defining fields and include",
						"required": false,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/Account"
						}
					}
				},
				"deprecated": false
			},
			"put": {
				"tags": [
					"Account"
				],
				"summary": "Replace attributes for a model instance and persist it into the data source.",
				"operationId": "Account.replaceById__put_accounts_{id}",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Model id",
						"required": true,
						"type": "string",
						"format": "JSON"
					},
					{
						"name": "data",
						"in": "body",
						"description": "Model instance data",
						"required": false,
						"schema": {
							"description": "Model instance data",
							"$ref": "#/definitions/Account"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/Account"
						}
					}
				},
				"deprecated": false
			},
			"delete": {
				"tags": [
					"Account"
				],
				"summary": "Delete a model instance by {{id}} from the data source.",
				"operationId": "Account.deleteById",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Model id",
						"required": true,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"type": "object"
						}
					}
				},
				"deprecated": false
			},
			"patch": {
				"tags": [
					"Account"
				],
				"summary": "Patch attributes for a model instance and persist it into the data source.",
				"operationId": "Account.prototype.patchAttributes",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Account id",
						"required": true,
						"type": "string",
						"format": "JSON"
					},
					{
						"name": "data",
						"in": "body",
						"description": "An object of model property name/value pairs",
						"required": false,
						"schema": {
							"description": "An object of model property name/value pairs",
							"$ref": "#/definitions/Account"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/Account"
						}
					}
				},
				"deprecated": false
			}
		},
		"/accounts/{id}/replace": {
			"post": {
				"tags": [
					"Account"
				],
				"summary": "Replace attributes for a model instance and persist it into the data source.",
				"operationId": "Account.replaceById__post_accounts_{id}_replace",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Model id",
						"required": true,
						"type": "string",
						"format": "JSON"
					},
					{
						"name": "data",
						"in": "body",
						"description": "Model instance data",
						"required": false,
						"schema": {
							"description": "Model instance data",
							"$ref": "#/definitions/Account"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/Account"
						}
					}
				},
				"deprecated": false
			}
		},
		"/accounts/findOne": {
			"get": {
				"tags": [
					"Account"
				],
				"summary": "Find first instance of the model matched by filter from the data source.",
				"operationId": "Account.findOne",
				"parameters": [
					{
						"name": "filter",
						"in": "query",
						"description": "Filter defining fields, where, include, order, offset, and limit",
						"required": false,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/Account"
						}
					}
				},
				"deprecated": false
			}
		},
		"/accounts/count": {
			"get": {
				"tags": [
					"Account"
				],
				"summary": "Count instances of the model matched by where from the data source.",
				"operationId": "Account.count",
				"parameters": [
					{
						"name": "where",
						"in": "query",
						"description": "Criteria to match model instances",
						"required": false,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"type": "object",
							"properties": {
								"count": {
									"type": "number",
									"format": "double"
								}
							}
						}
					}
				},
				"deprecated": false
			}
		},
		"/accounts/login": {
			"post": {
				"tags": [
					"Account"
				],
				"summary": "Login a user with username/email and password.",
				"operationId": "Account.login",
				"parameters": [
					{
						"name": "credentials",
						"in": "body",
						"required": true,
						"schema": {
							"type": "object"
						}
					},
					{
						"name": "include",
						"in": "query",
						"description": "Related objects to include in the response. See the description of return value for more details.",
						"required": false,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"description": "The response body contains properties of the AccessToken created on login.\nDepending on the value of `include` parameter, the body may contain additional properties:\n\n  - `user` - `U+007BUserU+007D` - Data of the currently logged in user. (`include=user`)\n\n",
							"type": "object"
						}
					}
				},
				"deprecated": false
			}
		},
		"/accounts/logout": {
			"post": {
				"tags": [
					"Account"
				],
				"summary": "Logout a user with access token.",
				"operationId": "Account.logout",
				"parameters": [],
				"responses": {
					"204": {
						"description": "Request was successful"
					}
				},
				"deprecated": false
			}
		},
		"/accounts/confirm": {
			"get": {
				"tags": [
					"Account"
				],
				"summary": "Confirm a user registration with email verification token.",
				"operationId": "Account.confirm",
				"parameters": [
					{
						"name": "uid",
						"in": "query",
						"required": true,
						"type": "string"
					},
					{
						"name": "token",
						"in": "query",
						"required": true,
						"type": "string"
					},
					{
						"name": "redirect",
						"in": "query",
						"required": false,
						"type": "string"
					}
				],
				"responses": {
					"204": {
						"description": "Request was successful"
					}
				},
				"deprecated": false
			}
		},
		"/accounts/reset": {
			"post": {
				"tags": [
					"Account"
				],
				"summary": "Reset password for a user with email.",
				"operationId": "Account.resetPassword",
				"parameters": [
					{
						"name": "options",
						"in": "body",
						"required": true,
						"schema": {
							"type": "object"
						}
					}
				],
				"responses": {
					"204": {
						"description": "Request was successful"
					}
				},
				"deprecated": false
			}
		},
		"/accounts/password": {
			"patch": {
				"tags": [
					"Account"
				],
				"summary": "Change current password",
				"operationId": "Account.changePassword",
				"parameters": [
					{
						"name": "oldPassword",
						"in": "formData",
						"description": "The user old password",
						"required": true,
						"type": "string"
					},
					{
						"name": "newPassword",
						"in": "formData",
						"description": "The user NEW password",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"type": "object",
							"properties": {
								"success": {
									"type": "boolean"
								}
							}
						}
					}
				},
				"deprecated": false
			}
		},
		"/accounts/{identity}/enable": {
			"put": {
				"tags": [
					"Account"
				],
				"summary": "Enable account",
				"operationId": "Account.enable",
				"parameters": [
					{
						"name": "identity",
						"in": "path",
						"description": "The id, username or email of the account",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"type": "array",
							"items": {
								"$ref": "#/definitions/x-any"
							}
						}
					}
				},
				"deprecated": false
			}
		},
		"/accounts/{identity}/disable": {
			"put": {
				"tags": [
					"Account"
				],
				"summary": "Disable account",
				"operationId": "Account.disable",
				"parameters": [
					{
						"name": "identity",
						"in": "path",
						"description": "The id, username or email of the account",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"type": "array",
							"items": {
								"$ref": "#/definitions/x-any"
							}
						}
					}
				},
				"deprecated": false
			}
		},
		"/accounts/{id}/avatar": {
			"post": {
				"tags": [
					"Account"
				],
				"summary": "Upload avatar",
				"operationId": "Account.uploadAvatar",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"type": "object",
							"properties": {
								"result": {
									"type": "object"
								}
							}
						}
					}
				},
				"deprecated": false
			},
			"get": {
				"tags": [
					"Account"
				],
				"summary": "Get avatar",
				"operationId": "Account.downloadAvatar",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"204": {
						"description": "Request was successful"
					}
				},
				"deprecated": false
			},
			"delete": {
				"tags": [
					"Account"
				],
				"summary": "Remove avatar",
				"operationId": "Account.removeAvatar",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"type": "object",
							"properties": {
								"undefined": {
									"type": "object"
								}
							}
						}
					}
				},
				"deprecated": false
			}
		},
		"/orgs/{id}/namespace": {
			"get": {
				"tags": [
					"Org"
				],
				"summary": "Fetches hasOne relation namespace.",
				"operationId": "Org.prototype.__get__namespace",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Org id",
						"required": true,
						"type": "string",
						"format": "JSON"
					},
					{
						"name": "refresh",
						"in": "query",
						"required": false,
						"type": "boolean"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/Namespace"
						}
					}
				},
				"deprecated": false
			},
			"post": {
				"tags": [
					"Org"
				],
				"summary": "Creates a new instance in namespace of this model.",
				"operationId": "Org.prototype.__create__namespace",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Org id",
						"required": true,
						"type": "string",
						"format": "JSON"
					},
					{
						"name": "data",
						"in": "body",
						"required": false,
						"schema": {
							"$ref": "#/definitions/Namespace"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/Namespace"
						}
					}
				},
				"deprecated": false
			},
			"put": {
				"tags": [
					"Org"
				],
				"summary": "Update namespace of this model.",
				"operationId": "Org.prototype.__update__namespace",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Org id",
						"required": true,
						"type": "string",
						"format": "JSON"
					},
					{
						"name": "data",
						"in": "body",
						"required": false,
						"schema": {
							"$ref": "#/definitions/Namespace"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/Namespace"
						}
					}
				},
				"deprecated": false
			},
			"delete": {
				"tags": [
					"Org"
				],
				"summary": "Deletes namespace of this model.",
				"operationId": "Org.prototype.__destroy__namespace",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Org id",
						"required": true,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"204": {
						"description": "Request was successful"
					}
				},
				"deprecated": false
			}
		},
		"/orgs/{id}/teams": {
			"get": {
				"tags": [
					"Org"
				],
				"summary": "Queries teams of Org.",
				"operationId": "Org.prototype.__get__teams",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Org id",
						"required": true,
						"type": "string",
						"format": "JSON"
					},
					{
						"name": "filter",
						"in": "query",
						"required": false,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"type": "array",
							"items": {
								"$ref": "#/definitions/Team"
							}
						}
					}
				},
				"deprecated": false
			},
			"post": {
				"tags": [
					"Org"
				],
				"summary": "Creates a new instance in teams of this model.",
				"operationId": "Org.prototype.__create__teams",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Org id",
						"required": true,
						"type": "string",
						"format": "JSON"
					},
					{
						"name": "data",
						"in": "body",
						"required": false,
						"schema": {
							"$ref": "#/definitions/Team"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/Team"
						}
					}
				},
				"deprecated": false
			}
		},
		"/orgs/{id}/teams/count": {
			"get": {
				"tags": [
					"Org"
				],
				"summary": "Counts teams of Org.",
				"operationId": "Org.prototype.__count__teams",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Org id",
						"required": true,
						"type": "string",
						"format": "JSON"
					},
					{
						"name": "where",
						"in": "query",
						"description": "Criteria to match model instances",
						"required": false,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"type": "object",
							"properties": {
								"count": {
									"type": "number",
									"format": "double"
								}
							}
						}
					}
				},
				"deprecated": false
			}
		},
		"/orgs/{id}/repos": {
			"get": {
				"tags": [
					"Org"
				],
				"summary": "Queries repos of Org.",
				"operationId": "Org.prototype.__get__repos",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Org id",
						"required": true,
						"type": "string",
						"format": "JSON"
					},
					{
						"name": "filter",
						"in": "query",
						"required": false,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"type": "array",
							"items": {
								"$ref": "#/definitions/Repo"
							}
						}
					}
				},
				"deprecated": false
			},
			"post": {
				"tags": [
					"Org"
				],
				"summary": "Creates a new instance in repos of this model.",
				"operationId": "Org.prototype.__create__repos",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Org id",
						"required": true,
						"type": "string",
						"format": "JSON"
					},
					{
						"name": "data",
						"in": "body",
						"required": false,
						"schema": {
							"$ref": "#/definitions/Repo"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/Repo"
						}
					}
				},
				"deprecated": false
			}
		},
		"/orgs/{id}/repos/count": {
			"get": {
				"tags": [
					"Org"
				],
				"summary": "Counts repos of Org.",
				"operationId": "Org.prototype.__count__repos",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Org id",
						"required": true,
						"type": "string",
						"format": "JSON"
					},
					{
						"name": "where",
						"in": "query",
						"description": "Criteria to match model instances",
						"required": false,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"type": "object",
							"properties": {
								"count": {
									"type": "number",
									"format": "double"
								}
							}
						}
					}
				},
				"deprecated": false
			}
		},
		"/orgs": {
			"post": {
				"tags": [
					"Org"
				],
				"summary": "create - Create a new instance of the model and persist it into the data source.",
				"operationId": "Org.create",
				"parameters": [
					{
						"name": "data",
						"in": "body",
						"description": "Model instance data",
						"required": false,
						"schema": {
							"description": "Model instance data",
							"$ref": "#/definitions/Org"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/Org"
						}
					}
				},
				"deprecated": false
			},
			"put": {
				"tags": [
					"Org"
				],
				"summary": "patchOrCreate - Patch an existing model instance or insert a new one into the data source.",
				"operationId": "Org.patchOrCreate",
				"parameters": [
					{
						"name": "data",
						"in": "body",
						"description": "Model instance data",
						"required": false,
						"schema": {
							"description": "Model instance data",
							"$ref": "#/definitions/Org"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/Org"
						}
					}
				},
				"deprecated": false
			},
			"get": {
				"tags": [
					"Org"
				],
				"summary": "find - Find all instances of the model matched by filter from the data source.",
				"operationId": "Org.find",
				"parameters": [
					{
						"name": "filter",
						"in": "query",
						"description": "Filter defining fields, where, include, order, offset, and limit",
						"required": false,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"type": "array",
							"items": {
								"$ref": "#/definitions/Org"
							}
						}
					}
				},
				"deprecated": false
			}
		},
		"/orgs/{id}/exists": {
			"get": {
				"tags": [
					"Org"
				],
				"summary": "exists - Check whether a model instance exists in the data source.",
				"operationId": "Org.exists",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Model id",
						"required": true,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"type": "object",
							"properties": {
								"exists": {
									"type": "boolean"
								}
							}
						}
					}
				},
				"deprecated": false
			}
		},
		"/orgs/{id}": {
			"get": {
				"tags": [
					"Org"
				],
				"summary": "findById - Find a model instance by {{id}} from the data source.",
				"operationId": "Org.findById",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Model id",
						"required": true,
						"type": "string",
						"format": "JSON"
					},
					{
						"name": "filter",
						"in": "query",
						"description": "Filter defining fields and include",
						"required": false,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/Org"
						}
					}
				},
				"deprecated": false
			},
			"delete": {
				"tags": [
					"Org"
				],
				"summary": "deleteById - Delete a model instance by {{id}} from the data source.",
				"operationId": "Org.deleteById",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Model id",
						"required": true,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"type": "object"
						}
					}
				},
				"deprecated": false
			},
			"put": {
				"tags": [
					"Org"
				],
				"summary": "patchAttributes - Patch attributes for a model instance and persist it into the data source.",
				"operationId": "Org.prototype.patchAttributes",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Org id",
						"required": true,
						"type": "string",
						"format": "JSON"
					},
					{
						"name": "data",
						"in": "body",
						"description": "An object of model property name/value pairs",
						"required": false,
						"schema": {
							"description": "An object of model property name/value pairs",
							"$ref": "#/definitions/Org"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/Org"
						}
					}
				},
				"deprecated": false
			}
		},
		"/orgs/findOne": {
			"get": {
				"tags": [
					"Org"
				],
				"summary": "findOne - Find first instance of the model matched by filter from the data source.",
				"operationId": "Org.findOne",
				"parameters": [
					{
						"name": "filter",
						"in": "query",
						"description": "Filter defining fields, where, include, order, offset, and limit",
						"required": false,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/Org"
						}
					}
				},
				"deprecated": false
			}
		},
		"/orgs/count": {
			"get": {
				"tags": [
					"Org"
				],
				"summary": "count - Count instances of the model matched by where from the data source.",
				"operationId": "Org.count",
				"parameters": [
					{
						"name": "where",
						"in": "query",
						"description": "Criteria to match model instances",
						"required": false,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"type": "object",
							"properties": {
								"count": {
									"type": "number",
									"format": "double"
								}
							}
						}
					}
				},
				"deprecated": false
			}
		},
		"/orgs/{id}/avatar": {
			"post": {
				"tags": [
					"Org"
				],
				"summary": "Upload avatar",
				"operationId": "Org.uploadAvatar",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"type": "object",
							"properties": {
								"result": {
									"type": "object"
								}
							}
						}
					}
				},
				"deprecated": false
			},
			"get": {
				"tags": [
					"Org"
				],
				"summary": "Get avatar",
				"operationId": "Org.downloadAvatar",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"204": {
						"description": "Request was successful"
					}
				},
				"deprecated": false
			},
			"delete": {
				"tags": [
					"Org"
				],
				"summary": "Remove avatar",
				"operationId": "Org.removeAvatar",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"type": "object",
							"properties": {
								"undefined": {
									"type": "object"
								}
							}
						}
					}
				},
				"deprecated": false
			}
		},
		"/orgs/{id}/roles": {
			"get": {
				"tags": [
					"Org"
				],
				"summary": "Query roles of Org.",
				"operationId": "Org.findRoles",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "The id of the organization",
						"required": true,
						"type": "string"
					},
					{
						"name": "filter",
						"in": "query",
						"description": "Filter defining fields, where, include, order, offset, and limit",
						"required": false,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"type": "array",
							"items": {
								"$ref": "#/definitions/x-any"
							}
						}
					}
				},
				"deprecated": false
			}
		},
		"/orgs/{id}/membership/{username}": {
			"get": {
				"tags": [
					"Org"
				],
				"summary": "Check if a user is, publicly or privately, a member of the org.",
				"operationId": "Org.checkMembershipForUser",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "The id of the  org",
						"required": true,
						"type": "string"
					},
					{
						"name": "username",
						"in": "path",
						"description": "The username to check",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"204": {
						"description": "Request was successful"
					}
				},
				"deprecated": false
			}
		},
		"/orgs/{id}/memberships/{username}": {
			"get": {
				"tags": [
					"Org"
				],
				"summary": "In order to get a user's membership with an org, the authenticated user must be an org member.",
				"operationId": "Org.getMembershipsForUser",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "The id of the  org",
						"required": true,
						"type": "string"
					},
					{
						"name": "username",
						"in": "path",
						"description": "The username",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"type": "object"
						}
					}
				},
				"deprecated": false
			},
			"put": {
				"tags": [
					"Org"
				],
				"summary": "In order to create or update a user's membership with an org, the authenticated user must be an org owner.",
				"operationId": "Org.addMembership",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "The id of the  org",
						"required": true,
						"type": "string"
					},
					{
						"name": "username",
						"in": "path",
						"description": "The username",
						"required": true,
						"type": "string"
					},
					{
						"name": "role",
						"in": "formData",
						"description": "The role name",
						"required": false,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"type": "object"
						}
					}
				},
				"deprecated": false
			},
			"delete": {
				"tags": [
					"Org"
				],
				"summary": "In order to remove a user's membership with an org, the authenticated user must be an org owner.",
				"operationId": "Org.removeMembership",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "The id of the  org",
						"required": true,
						"type": "string"
					},
					{
						"name": "username",
						"in": "path",
						"description": "The username",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"204": {
						"description": "Request was successful"
					}
				},
				"deprecated": false
			}
		},
		"/orgs/{id}/memberships": {
			"get": {
				"tags": [
					"Org"
				],
				"summary": "List all users who are members of an organization org, the authenticated user must be an org member.",
				"operationId": "Org.getMemberships",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "The id of the  org",
						"required": true,
						"type": "string"
					},
					{
						"name": "where",
						"in": "query",
						"description": "The condition for query. default is all.\n - role: [\"admin\", \"member\", \"manager\", \"all\"]",
						"required": false,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"type": "array",
							"items": {
								"$ref": "#/definitions/x-any"
							}
						}
					}
				},
				"deprecated": false
			}
		},
		"/orgs/{id}/invitations": {
			"get": {
				"tags": [
					"Org"
				],
				"summary": "List pending org invitations",
				"operationId": "Org.invitations",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "The id of the  org",
						"required": true,
						"type": "string"
					},
					{
						"name": "filter",
						"in": "query",
						"description": "Filter for membership",
						"required": false,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"type": "array",
							"items": {
								"$ref": "#/definitions/x-any"
							}
						}
					}
				},
				"deprecated": false
			}
		},
		"/forms/{id}/owner": {
			"get": {
				"tags": [
					"Form"
				],
				"summary": "Fetches belongsTo relation owner.",
				"operationId": "Form.prototype.__get__owner",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Form id",
						"required": true,
						"type": "string",
						"format": "JSON"
					},
					{
						"name": "refresh",
						"in": "query",
						"required": false,
						"type": "boolean"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/PersistedModel"
						}
					}
				},
				"deprecated": false
			}
		},
		"/forms/{id}/repo": {
			"get": {
				"tags": [
					"Form"
				],
				"summary": "Fetches belongsTo relation repo.",
				"operationId": "Form.prototype.__get__repo",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Form id",
						"required": true,
						"type": "string",
						"format": "JSON"
					},
					{
						"name": "refresh",
						"in": "query",
						"required": false,
						"type": "boolean"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/Repo"
						}
					}
				},
				"deprecated": false
			}
		},
		"/forms": {
			"post": {
				"tags": [
					"Form"
				],
				"summary": "Create a new instance of the model and persist it into the data source.",
				"operationId": "Form.create",
				"parameters": [
					{
						"name": "data",
						"in": "body",
						"description": "Model instance data",
						"required": false,
						"schema": {
							"description": "Model instance data",
							"$ref": "#/definitions/Form"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/Form"
						}
					}
				},
				"deprecated": false
			},
			"patch": {
				"tags": [
					"Form"
				],
				"summary": "Patch an existing model instance or insert a new one into the data source.",
				"operationId": "Form.patchOrCreate",
				"parameters": [
					{
						"name": "data",
						"in": "body",
						"description": "Model instance data",
						"required": false,
						"schema": {
							"description": "Model instance data",
							"$ref": "#/definitions/Form"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/Form"
						}
					}
				},
				"deprecated": false
			},
			"get": {
				"tags": [
					"Form"
				],
				"summary": "Find all instances of the model matched by filter from the data source.",
				"operationId": "Form.find",
				"parameters": [
					{
						"name": "filter",
						"in": "query",
						"description": "Filter defining fields, where, include, order, offset, and limit",
						"required": false,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"type": "array",
							"items": {
								"$ref": "#/definitions/Form"
							}
						}
					}
				},
				"deprecated": false
			}
		},
		"/forms/{id}/exists": {
			"get": {
				"tags": [
					"Form"
				],
				"summary": "Check whether a model instance exists in the data source.",
				"operationId": "Form.exists__get_forms_{id}_exists",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Model id",
						"required": true,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"type": "object",
							"properties": {
								"exists": {
									"type": "boolean"
								}
							}
						}
					}
				},
				"deprecated": false
			}
		},
		"/forms/{id}": {
			"head": {
				"tags": [
					"Form"
				],
				"summary": "Check whether a model instance exists in the data source.",
				"operationId": "Form.exists__head_forms_{id}",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Model id",
						"required": true,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"type": "object",
							"properties": {
								"exists": {
									"type": "boolean"
								}
							}
						}
					}
				},
				"deprecated": false
			},
			"get": {
				"tags": [
					"Form"
				],
				"summary": "Find a model instance by {{id}} from the data source.",
				"operationId": "Form.findById",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Model id",
						"required": true,
						"type": "string",
						"format": "JSON"
					},
					{
						"name": "filter",
						"in": "query",
						"description": "Filter defining fields and include",
						"required": false,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/Form"
						}
					}
				},
				"deprecated": false
			},
			"delete": {
				"tags": [
					"Form"
				],
				"summary": "Delete a model instance by {{id}} from the data source.",
				"operationId": "Form.deleteById",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Model id",
						"required": true,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"type": "object"
						}
					}
				},
				"deprecated": false
			},
			"patch": {
				"tags": [
					"Form"
				],
				"summary": "Patch attributes for a model instance and persist it into the data source.",
				"operationId": "Form.prototype.patchAttributes",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Form id",
						"required": true,
						"type": "string",
						"format": "JSON"
					},
					{
						"name": "data",
						"in": "body",
						"description": "An object of model property name/value pairs",
						"required": false,
						"schema": {
							"description": "An object of model property name/value pairs",
							"$ref": "#/definitions/Form"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/Form"
						}
					}
				},
				"deprecated": false
			}
		},
		"/forms/findOne": {
			"get": {
				"tags": [
					"Form"
				],
				"summary": "Find first instance of the model matched by filter from the data source.",
				"operationId": "Form.findOne",
				"parameters": [
					{
						"name": "filter",
						"in": "query",
						"description": "Filter defining fields, where, include, order, offset, and limit",
						"required": false,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/Form"
						}
					}
				},
				"deprecated": false
			}
		},
		"/forms/count": {
			"get": {
				"tags": [
					"Form"
				],
				"summary": "Count instances of the model matched by where from the data source.",
				"operationId": "Form.count",
				"parameters": [
					{
						"name": "where",
						"in": "query",
						"description": "Criteria to match model instances",
						"required": false,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"type": "object",
							"properties": {
								"count": {
									"type": "number",
									"format": "double"
								}
							}
						}
					}
				},
				"deprecated": false
			}
		},
		"/teams/{id}/org": {
			"get": {
				"tags": [
					"Team"
				],
				"summary": "Fetches belongsTo relation org.",
				"operationId": "Team.prototype.__get__org",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Team id",
						"required": true,
						"type": "string",
						"format": "JSON"
					},
					{
						"name": "refresh",
						"in": "query",
						"required": false,
						"type": "boolean"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/Org"
						}
					}
				},
				"deprecated": false
			}
		},
		"/teams": {
			"put": {
				"tags": [
					"Team"
				],
				"summary": "patchOrCreate - Patch an existing model instance or insert a new one into the data source.",
				"operationId": "Team.patchOrCreate",
				"parameters": [
					{
						"name": "data",
						"in": "body",
						"description": "Model instance data",
						"required": false,
						"schema": {
							"description": "Model instance data",
							"$ref": "#/definitions/Team"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/Team"
						}
					}
				},
				"deprecated": false
			},
			"get": {
				"tags": [
					"Team"
				],
				"summary": "find - Find all instances of the model matched by filter from the data source.",
				"operationId": "Team.find",
				"parameters": [
					{
						"name": "filter",
						"in": "query",
						"description": "Filter defining fields, where, include, order, offset, and limit",
						"required": false,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"type": "array",
							"items": {
								"$ref": "#/definitions/Team"
							}
						}
					}
				},
				"deprecated": false
			}
		},
		"/teams/{id}/exists": {
			"get": {
				"tags": [
					"Team"
				],
				"summary": "exists - Check whether a model instance exists in the data source.",
				"operationId": "Team.exists",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Model id",
						"required": true,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"type": "object",
							"properties": {
								"exists": {
									"type": "boolean"
								}
							}
						}
					}
				},
				"deprecated": false
			}
		},
		"/teams/{id}": {
			"get": {
				"tags": [
					"Team"
				],
				"summary": "findById - Find a model instance by {{id}} from the data source.",
				"operationId": "Team.findById",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Model id",
						"required": true,
						"type": "string",
						"format": "JSON"
					},
					{
						"name": "filter",
						"in": "query",
						"description": "Filter defining fields and include",
						"required": false,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/Team"
						}
					}
				},
				"deprecated": false
			},
			"delete": {
				"tags": [
					"Team"
				],
				"summary": "deleteById - Delete a model instance by {{id}} from the data source.",
				"operationId": "Team.deleteById",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Model id",
						"required": true,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"type": "object"
						}
					}
				},
				"deprecated": false
			},
			"put": {
				"tags": [
					"Team"
				],
				"summary": "patchAttributes - Patch attributes for a model instance and persist it into the data source.",
				"operationId": "Team.prototype.patchAttributes",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Team id",
						"required": true,
						"type": "string",
						"format": "JSON"
					},
					{
						"name": "data",
						"in": "body",
						"description": "An object of model property name/value pairs",
						"required": false,
						"schema": {
							"description": "An object of model property name/value pairs",
							"$ref": "#/definitions/Team"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/Team"
						}
					}
				},
				"deprecated": false
			}
		},
		"/teams/findOne": {
			"get": {
				"tags": [
					"Team"
				],
				"summary": "findOne - Find first instance of the model matched by filter from the data source.",
				"operationId": "Team.findOne",
				"parameters": [
					{
						"name": "filter",
						"in": "query",
						"description": "Filter defining fields, where, include, order, offset, and limit",
						"required": false,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/Team"
						}
					}
				},
				"deprecated": false
			}
		},
		"/teams/count": {
			"get": {
				"tags": [
					"Team"
				],
				"summary": "count - Count instances of the model matched by where from the data source.",
				"operationId": "Team.count",
				"parameters": [
					{
						"name": "where",
						"in": "query",
						"description": "Criteria to match model instances",
						"required": false,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"type": "object",
							"properties": {
								"count": {
									"type": "number",
									"format": "double"
								}
							}
						}
					}
				},
				"deprecated": false
			}
		},
		"/teams/{id}/enable": {
			"put": {
				"tags": [
					"Team"
				],
				"summary": "enable - Enable a disabled team",
				"operationId": "Team.enable",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Team id",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"type": "object"
						}
					}
				},
				"deprecated": false
			}
		},
		"/teams/{id}/disable": {
			"put": {
				"tags": [
					"Team"
				],
				"summary": "disable - Disable a team",
				"operationId": "Team.disable",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Team id",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"type": "object"
						}
					}
				},
				"deprecated": false
			}
		},
		"/teams/{id}/avatar": {
			"post": {
				"tags": [
					"Team"
				],
				"summary": "Upload avatar",
				"operationId": "Team.uploadAvatar",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"type": "object",
							"properties": {
								"result": {
									"type": "object"
								}
							}
						}
					}
				},
				"deprecated": false
			},
			"get": {
				"tags": [
					"Team"
				],
				"summary": "Get avatar",
				"operationId": "Team.downloadAvatar",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"204": {
						"description": "Request was successful"
					}
				},
				"deprecated": false
			},
			"delete": {
				"tags": [
					"Team"
				],
				"summary": "Remove avatar",
				"operationId": "Team.removeAvatar",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"type": "object",
							"properties": {
								"undefined": {
									"type": "object"
								}
							}
						}
					}
				},
				"deprecated": false
			}
		},
		"/teams/{id}/roles": {
			"get": {
				"tags": [
					"Team"
				],
				"summary": "Query roles of Team.",
				"operationId": "Team.findRoles",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "The id of the organization",
						"required": true,
						"type": "string"
					},
					{
						"name": "filter",
						"in": "query",
						"description": "Filter defining fields, where, include, order, offset, and limit",
						"required": false,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"type": "array",
							"items": {
								"$ref": "#/definitions/x-any"
							}
						}
					}
				},
				"deprecated": false
			}
		},
		"/teams/{id}/membership/{username}": {
			"get": {
				"tags": [
					"Team"
				],
				"summary": "Check if a user is, publicly or privately, a member of the team.",
				"operationId": "Team.checkMembershipForUser",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "The id of the  team",
						"required": true,
						"type": "string"
					},
					{
						"name": "username",
						"in": "path",
						"description": "The username to check",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"204": {
						"description": "Request was successful"
					}
				},
				"deprecated": false
			}
		},
		"/teams/{id}/memberships/{username}": {
			"get": {
				"tags": [
					"Team"
				],
				"summary": "In order to get a user's membership with an team, the authenticated user must be an team member.",
				"operationId": "Team.getMembershipsForUser",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "The id of the  team",
						"required": true,
						"type": "string"
					},
					{
						"name": "username",
						"in": "path",
						"description": "The username",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"type": "object"
						}
					}
				},
				"deprecated": false
			},
			"put": {
				"tags": [
					"Team"
				],
				"summary": "In order to create or update a user's membership with an team, the authenticated user must be an team owner.",
				"operationId": "Team.addMembership",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "The id of the  team",
						"required": true,
						"type": "string"
					},
					{
						"name": "username",
						"in": "path",
						"description": "The username",
						"required": true,
						"type": "string"
					},
					{
						"name": "role",
						"in": "formData",
						"description": "The role name",
						"required": false,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"type": "object"
						}
					}
				},
				"deprecated": false
			},
			"delete": {
				"tags": [
					"Team"
				],
				"summary": "In order to remove a user's membership with an team, the authenticated user must be an team owner.",
				"operationId": "Team.removeMembership",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "The id of the  team",
						"required": true,
						"type": "string"
					},
					{
						"name": "username",
						"in": "path",
						"description": "The username",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"204": {
						"description": "Request was successful"
					}
				},
				"deprecated": false
			}
		},
		"/teams/{id}/memberships": {
			"get": {
				"tags": [
					"Team"
				],
				"summary": "List all users who are members of an organization team, the authenticated user must be an team member.",
				"operationId": "Team.getMemberships",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "The id of the  team",
						"required": true,
						"type": "string"
					},
					{
						"name": "where",
						"in": "query",
						"description": "The condition for query. default is all.\n - role: [\"admin\", \"member\", \"manager\", \"all\"]",
						"required": false,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"type": "array",
							"items": {
								"$ref": "#/definitions/x-any"
							}
						}
					}
				},
				"deprecated": false
			}
		},
		"/teams/{id}/invitations": {
			"get": {
				"tags": [
					"Team"
				],
				"summary": "List pending team invitations",
				"operationId": "Team.invitations",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "The id of the  team",
						"required": true,
						"type": "string"
					},
					{
						"name": "filter",
						"in": "query",
						"description": "Filter for membership",
						"required": false,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"type": "array",
							"items": {
								"$ref": "#/definitions/x-any"
							}
						}
					}
				},
				"deprecated": false
			}
		},
		"/pages/{id}/owner": {
			"get": {
				"tags": [
					"Page"
				],
				"summary": "Fetches belongsTo relation owner.",
				"operationId": "Page.prototype.__get__owner",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Page id",
						"required": true,
						"type": "string",
						"format": "JSON"
					},
					{
						"name": "refresh",
						"in": "query",
						"required": false,
						"type": "boolean"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/PersistedModel"
						}
					}
				},
				"deprecated": false
			}
		},
		"/pages/{id}/repo": {
			"get": {
				"tags": [
					"Page"
				],
				"summary": "Fetches belongsTo relation repo.",
				"operationId": "Page.prototype.__get__repo",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Page id",
						"required": true,
						"type": "string",
						"format": "JSON"
					},
					{
						"name": "refresh",
						"in": "query",
						"required": false,
						"type": "boolean"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/Repo"
						}
					}
				},
				"deprecated": false
			}
		},
		"/pages": {
			"post": {
				"tags": [
					"Page"
				],
				"summary": "create - Create a new instance of the model and persist it into the data source.",
				"operationId": "Page.create",
				"parameters": [
					{
						"name": "data",
						"in": "body",
						"description": "Model instance data",
						"required": false,
						"schema": {
							"description": "Model instance data",
							"$ref": "#/definitions/Page"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/Page"
						}
					}
				},
				"deprecated": false
			},
			"patch": {
				"tags": [
					"Page"
				],
				"summary": "patchOrCreate - Patch an existing model instance or insert a new one into the data source.",
				"operationId": "Page.patchOrCreate",
				"parameters": [
					{
						"name": "data",
						"in": "body",
						"description": "Model instance data",
						"required": false,
						"schema": {
							"description": "Model instance data",
							"$ref": "#/definitions/Page"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/Page"
						}
					}
				},
				"deprecated": false
			},
			"get": {
				"tags": [
					"Page"
				],
				"summary": "find - Find all instances of the model matched by filter from the data source.",
				"operationId": "Page.find",
				"parameters": [
					{
						"name": "filter",
						"in": "query",
						"description": "Filter defining fields, where, include, order, offset, and limit",
						"required": false,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"type": "array",
							"items": {
								"$ref": "#/definitions/Page"
							}
						}
					}
				},
				"deprecated": false
			}
		},
		"/pages/{id}/exists": {
			"get": {
				"tags": [
					"Page"
				],
				"summary": "exists - Check whether a model instance exists in the data source.",
				"operationId": "Page.exists",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Model id",
						"required": true,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"type": "object",
							"properties": {
								"exists": {
									"type": "boolean"
								}
							}
						}
					}
				},
				"deprecated": false
			}
		},
		"/pages/{id}": {
			"get": {
				"tags": [
					"Page"
				],
				"summary": "findById - Find a model instance by {{id}} from the data source.",
				"operationId": "Page.findById",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Model id",
						"required": true,
						"type": "string",
						"format": "JSON"
					},
					{
						"name": "filter",
						"in": "query",
						"description": "Filter defining fields and include",
						"required": false,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/Page"
						}
					}
				},
				"deprecated": false
			},
			"delete": {
				"tags": [
					"Page"
				],
				"summary": "deleteById - Delete a model instance by {{id}} from the data source.",
				"operationId": "Page.deleteById",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Model id",
						"required": true,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"type": "object"
						}
					}
				},
				"deprecated": false
			},
			"patch": {
				"tags": [
					"Page"
				],
				"summary": "patchAttributes - Patch attributes for a model instance and persist it into the data source.",
				"operationId": "Page.prototype.patchAttributes",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Page id",
						"required": true,
						"type": "string",
						"format": "JSON"
					},
					{
						"name": "data",
						"in": "body",
						"description": "An object of model property name/value pairs",
						"required": false,
						"schema": {
							"description": "An object of model property name/value pairs",
							"$ref": "#/definitions/Page"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/Page"
						}
					}
				},
				"deprecated": false
			}
		},
		"/pages/findOne": {
			"get": {
				"tags": [
					"Page"
				],
				"summary": "findOne - Find first instance of the model matched by filter from the data source.",
				"operationId": "Page.findOne",
				"parameters": [
					{
						"name": "filter",
						"in": "query",
						"description": "Filter defining fields, where, include, order, offset, and limit",
						"required": false,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/Page"
						}
					}
				},
				"deprecated": false
			}
		},
		"/pages/count": {
			"get": {
				"tags": [
					"Page"
				],
				"summary": "count - Count instances of the model matched by where from the data source.",
				"operationId": "Page.count",
				"parameters": [
					{
						"name": "where",
						"in": "query",
						"description": "Criteria to match model instances",
						"required": false,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"type": "object",
							"properties": {
								"count": {
									"type": "number",
									"format": "double"
								}
							}
						}
					}
				},
				"deprecated": false
			}
		},
		"/reports/{id}/owner": {
			"get": {
				"tags": [
					"Report"
				],
				"summary": "Fetches belongsTo relation owner.",
				"operationId": "Report.prototype.__get__owner",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Report id",
						"required": true,
						"type": "string",
						"format": "JSON"
					},
					{
						"name": "refresh",
						"in": "query",
						"required": false,
						"type": "boolean"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/PersistedModel"
						}
					}
				},
				"deprecated": false
			}
		},
		"/reports/{id}/repo": {
			"get": {
				"tags": [
					"Report"
				],
				"summary": "Fetches belongsTo relation repo.",
				"operationId": "Report.prototype.__get__repo",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Report id",
						"required": true,
						"type": "string",
						"format": "JSON"
					},
					{
						"name": "refresh",
						"in": "query",
						"required": false,
						"type": "boolean"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/Repo"
						}
					}
				},
				"deprecated": false
			}
		},
		"/reports": {
			"post": {
				"tags": [
					"Report"
				],
				"summary": "create - Create a new instance of the model and persist it into the data source.",
				"operationId": "Report.create",
				"parameters": [
					{
						"name": "data",
						"in": "body",
						"description": "Model instance data",
						"required": false,
						"schema": {
							"description": "Model instance data",
							"$ref": "#/definitions/Report"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/Report"
						}
					}
				},
				"deprecated": false
			},
			"patch": {
				"tags": [
					"Report"
				],
				"summary": "patchOrCreate - Patch an existing model instance or insert a new one into the data source.",
				"operationId": "Report.patchOrCreate",
				"parameters": [
					{
						"name": "data",
						"in": "body",
						"description": "Model instance data",
						"required": false,
						"schema": {
							"description": "Model instance data",
							"$ref": "#/definitions/Report"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/Report"
						}
					}
				},
				"deprecated": false
			},
			"get": {
				"tags": [
					"Report"
				],
				"summary": "find - Find all instances of the model matched by filter from the data source.",
				"operationId": "Report.find",
				"parameters": [
					{
						"name": "filter",
						"in": "query",
						"description": "Filter defining fields, where, include, order, offset, and limit",
						"required": false,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"type": "array",
							"items": {
								"$ref": "#/definitions/Report"
							}
						}
					}
				},
				"deprecated": false
			}
		},
		"/reports/{id}/exists": {
			"get": {
				"tags": [
					"Report"
				],
				"summary": "exists - Check whether a model instance exists in the data source.",
				"operationId": "Report.exists",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Model id",
						"required": true,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"type": "object",
							"properties": {
								"exists": {
									"type": "boolean"
								}
							}
						}
					}
				},
				"deprecated": false
			}
		},
		"/reports/{id}": {
			"get": {
				"tags": [
					"Report"
				],
				"summary": "findById - Find a model instance by {{id}} from the data source.",
				"operationId": "Report.findById",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Model id",
						"required": true,
						"type": "string",
						"format": "JSON"
					},
					{
						"name": "filter",
						"in": "query",
						"description": "Filter defining fields and include",
						"required": false,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/Report"
						}
					}
				},
				"deprecated": false
			},
			"delete": {
				"tags": [
					"Report"
				],
				"summary": "deleteById - Delete a model instance by {{id}} from the data source.",
				"operationId": "Report.deleteById",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Model id",
						"required": true,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"type": "object"
						}
					}
				},
				"deprecated": false
			},
			"patch": {
				"tags": [
					"Report"
				],
				"summary": "patchAttributes - Patch attributes for a model instance and persist it into the data source.",
				"operationId": "Report.prototype.patchAttributes",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Report id",
						"required": true,
						"type": "string",
						"format": "JSON"
					},
					{
						"name": "data",
						"in": "body",
						"description": "An object of model property name/value pairs",
						"required": false,
						"schema": {
							"description": "An object of model property name/value pairs",
							"$ref": "#/definitions/Report"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/Report"
						}
					}
				},
				"deprecated": false
			}
		},
		"/reports/findOne": {
			"get": {
				"tags": [
					"Report"
				],
				"summary": "findOne - Find first instance of the model matched by filter from the data source.",
				"operationId": "Report.findOne",
				"parameters": [
					{
						"name": "filter",
						"in": "query",
						"description": "Filter defining fields, where, include, order, offset, and limit",
						"required": false,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/Report"
						}
					}
				},
				"deprecated": false
			}
		},
		"/reports/count": {
			"get": {
				"tags": [
					"Report"
				],
				"summary": "count - Count instances of the model matched by where from the data source.",
				"operationId": "Report.count",
				"parameters": [
					{
						"name": "where",
						"in": "query",
						"description": "Criteria to match model instances",
						"required": false,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"type": "object",
							"properties": {
								"count": {
									"type": "number",
									"format": "double"
								}
							}
						}
					}
				},
				"deprecated": false
			}
		},
		"/reports/{id}/publish": {
			"post": {
				"tags": [
					"Report"
				],
				"summary": "publish - Publish a report",
				"operationId": "Report.publish",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Report id",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"type": "object"
						}
					}
				},
				"deprecated": false
			}
		},
		"/reports/{id}/withdraw": {
			"post": {
				"tags": [
					"Report"
				],
				"summary": "withdraw - Withdraw a report form publishing",
				"operationId": "Report.withdraw",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Report id",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"type": "object"
						}
					}
				},
				"deprecated": false
			}
		},
		"/reports/query": {
			"post": {
				"tags": [
					"Report"
				],
				"summary": "query - Request for an aggregation query",
				"operationId": "Report.query",
				"parameters": [
					{
						"name": "query",
						"in": "body",
						"description": "Query object",
						"required": true,
						"schema": {
							"description": "Query object",
							"$ref": "#/definitions/x-any"
						}
					},
					{
						"name": "opts",
						"in": "query",
						"description": "Options for query includes: page",
						"required": false,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"type": "array",
							"items": {
								"$ref": "#/definitions/x-any"
							}
						}
					}
				},
				"deprecated": false
			}
		},
		"/layers/{id}/owner": {
			"get": {
				"tags": [
					"Layer"
				],
				"summary": "Fetches belongsTo relation owner.",
				"operationId": "Layer.prototype.__get__owner",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Layer id",
						"required": true,
						"type": "string",
						"format": "JSON"
					},
					{
						"name": "refresh",
						"in": "query",
						"required": false,
						"type": "boolean"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/PersistedModel"
						}
					}
				},
				"deprecated": false
			}
		},
		"/layers/{id}/repo": {
			"get": {
				"tags": [
					"Layer"
				],
				"summary": "Fetches belongsTo relation repo.",
				"operationId": "Layer.prototype.__get__repo",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Layer id",
						"required": true,
						"type": "string",
						"format": "JSON"
					},
					{
						"name": "refresh",
						"in": "query",
						"required": false,
						"type": "boolean"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/Repo"
						}
					}
				},
				"deprecated": false
			}
		},
		"/layers": {
			"post": {
				"tags": [
					"Layer"
				],
				"summary": "create - Create a new instance of the model and persist it into the data source.",
				"operationId": "Layer.create",
				"parameters": [
					{
						"name": "data",
						"in": "body",
						"description": "Model instance data",
						"required": false,
						"schema": {
							"description": "Model instance data",
							"$ref": "#/definitions/Layer"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/Layer"
						}
					}
				},
				"deprecated": false
			},
			"patch": {
				"tags": [
					"Layer"
				],
				"summary": "patchOrCreate - Patch an existing model instance or insert a new one into the data source.",
				"operationId": "Layer.patchOrCreate",
				"parameters": [
					{
						"name": "data",
						"in": "body",
						"description": "Model instance data",
						"required": false,
						"schema": {
							"description": "Model instance data",
							"$ref": "#/definitions/Layer"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/Layer"
						}
					}
				},
				"deprecated": false
			},
			"get": {
				"tags": [
					"Layer"
				],
				"summary": "find - Find all instances of the model matched by filter from the data source.",
				"operationId": "Layer.find",
				"parameters": [
					{
						"name": "filter",
						"in": "query",
						"description": "Filter defining fields, where, include, order, offset, and limit",
						"required": false,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"type": "array",
							"items": {
								"$ref": "#/definitions/Layer"
							}
						}
					}
				},
				"deprecated": false
			}
		},
		"/layers/{id}/exists": {
			"get": {
				"tags": [
					"Layer"
				],
				"summary": "exists - Check whether a model instance exists in the data source.",
				"operationId": "Layer.exists",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Model id",
						"required": true,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"type": "object",
							"properties": {
								"exists": {
									"type": "boolean"
								}
							}
						}
					}
				},
				"deprecated": false
			}
		},
		"/layers/{id}": {
			"get": {
				"tags": [
					"Layer"
				],
				"summary": "findById - Find a model instance by {{id}} from the data source.",
				"operationId": "Layer.findById",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Model id",
						"required": true,
						"type": "string",
						"format": "JSON"
					},
					{
						"name": "filter",
						"in": "query",
						"description": "Filter defining fields and include",
						"required": false,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/Layer"
						}
					}
				},
				"deprecated": false
			},
			"delete": {
				"tags": [
					"Layer"
				],
				"summary": "deleteById - Delete a model instance by {{id}} from the data source.",
				"operationId": "Layer.deleteById",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Model id",
						"required": true,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"type": "object"
						}
					}
				},
				"deprecated": false
			},
			"patch": {
				"tags": [
					"Layer"
				],
				"summary": "patchAttributes - Patch attributes for a model instance and persist it into the data source.",
				"operationId": "Layer.prototype.patchAttributes",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Layer id",
						"required": true,
						"type": "string",
						"format": "JSON"
					},
					{
						"name": "data",
						"in": "body",
						"description": "An object of model property name/value pairs",
						"required": false,
						"schema": {
							"description": "An object of model property name/value pairs",
							"$ref": "#/definitions/Layer"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/Layer"
						}
					}
				},
				"deprecated": false
			}
		},
		"/layers/findOne": {
			"get": {
				"tags": [
					"Layer"
				],
				"summary": "findOne - Find first instance of the model matched by filter from the data source.",
				"operationId": "Layer.findOne",
				"parameters": [
					{
						"name": "filter",
						"in": "query",
						"description": "Filter defining fields, where, include, order, offset, and limit",
						"required": false,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/Layer"
						}
					}
				},
				"deprecated": false
			}
		},
		"/layers/count": {
			"get": {
				"tags": [
					"Layer"
				],
				"summary": "count - Count instances of the model matched by where from the data source.",
				"operationId": "Layer.count",
				"parameters": [
					{
						"name": "where",
						"in": "query",
						"description": "Criteria to match model instances",
						"required": false,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"type": "object",
							"properties": {
								"count": {
									"type": "number",
									"format": "double"
								}
							}
						}
					}
				},
				"deprecated": false
			}
		},
		"/layers/{id}/fields": {
			"patch": {
				"tags": [
					"Layer"
				],
				"summary": "patchFields - Patch the fields of an existing layer",
				"operationId": "Layer.patchFields",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "The id of the layer",
						"required": true,
						"type": "string"
					},
					{
						"name": "fields",
						"in": "body",
						"description": "The schema of the layer",
						"required": true,
						"schema": {
							"description": "The schema of the layer",
							"type": "array",
							"items": {
								"$ref": "#/definitions/LayerField"
							}
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/Layer"
						}
					}
				},
				"deprecated": false
			}
		},
		"/layers/{id}/schema": {
			"patch": {
				"tags": [
					"Layer"
				],
				"summary": "patchSchema - Patch the schema of an existing layer",
				"operationId": "Layer.patchSchema",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "The id of the layer",
						"required": true,
						"type": "string"
					},
					{
						"name": "schema",
						"in": "body",
						"description": "The schema of the layer",
						"required": true,
						"schema": {
							"description": "The schema of the layer",
							"$ref": "#/definitions/LayerSchema"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/Layer"
						}
					}
				},
				"deprecated": false
			}
		},
		"/connections/{id}/owner": {
			"get": {
				"tags": [
					"Connection"
				],
				"summary": "Fetches belongsTo relation owner.",
				"operationId": "Connection.prototype.__get__owner",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Connection id",
						"required": true,
						"type": "string",
						"format": "JSON"
					},
					{
						"name": "refresh",
						"in": "query",
						"required": false,
						"type": "boolean"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/PersistedModel"
						}
					}
				},
				"deprecated": false
			}
		},
		"/connections/{id}/repo": {
			"get": {
				"tags": [
					"Connection"
				],
				"summary": "Fetches belongsTo relation repo.",
				"operationId": "Connection.prototype.__get__repo",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Connection id",
						"required": true,
						"type": "string",
						"format": "JSON"
					},
					{
						"name": "refresh",
						"in": "query",
						"required": false,
						"type": "boolean"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/Repo"
						}
					}
				},
				"deprecated": false
			}
		},
		"/connections": {
			"post": {
				"tags": [
					"Connection"
				],
				"summary": "create - Create a new instance of the model and persist it into the data source.",
				"operationId": "Connection.create",
				"parameters": [
					{
						"name": "data",
						"in": "body",
						"description": "Model instance data",
						"required": false,
						"schema": {
							"description": "Model instance data",
							"$ref": "#/definitions/Connection"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/Connection"
						}
					}
				},
				"deprecated": false
			},
			"patch": {
				"tags": [
					"Connection"
				],
				"summary": "patchOrCreate - Patch an existing model instance or insert a new one into the data source.",
				"operationId": "Connection.patchOrCreate",
				"parameters": [
					{
						"name": "data",
						"in": "body",
						"description": "Model instance data",
						"required": false,
						"schema": {
							"description": "Model instance data",
							"$ref": "#/definitions/Connection"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/Connection"
						}
					}
				},
				"deprecated": false
			},
			"get": {
				"tags": [
					"Connection"
				],
				"summary": "find - Find all instances of the model matched by filter from the data source.",
				"operationId": "Connection.find",
				"parameters": [
					{
						"name": "filter",
						"in": "query",
						"description": "Filter defining fields, where, include, order, offset, and limit",
						"required": false,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"type": "array",
							"items": {
								"$ref": "#/definitions/Connection"
							}
						}
					}
				},
				"deprecated": false
			}
		},
		"/connections/{id}/exists": {
			"get": {
				"tags": [
					"Connection"
				],
				"summary": "exists - Check whether a model instance exists in the data source.",
				"operationId": "Connection.exists",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Model id",
						"required": true,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"type": "object",
							"properties": {
								"exists": {
									"type": "boolean"
								}
							}
						}
					}
				},
				"deprecated": false
			}
		},
		"/connections/{id}": {
			"get": {
				"tags": [
					"Connection"
				],
				"summary": "findById - Find a model instance by {{id}} from the data source.",
				"operationId": "Connection.findById",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Model id",
						"required": true,
						"type": "string",
						"format": "JSON"
					},
					{
						"name": "filter",
						"in": "query",
						"description": "Filter defining fields and include",
						"required": false,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/Connection"
						}
					}
				},
				"deprecated": false
			},
			"delete": {
				"tags": [
					"Connection"
				],
				"summary": "deleteById - Delete a model instance by {{id}} from the data source.",
				"operationId": "Connection.deleteById",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Model id",
						"required": true,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"type": "object"
						}
					}
				},
				"deprecated": false
			},
			"patch": {
				"tags": [
					"Connection"
				],
				"summary": "patchAttributes - Patch attributes for a model instance and persist it into the data source.",
				"operationId": "Connection.prototype.patchAttributes",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Connection id",
						"required": true,
						"type": "string",
						"format": "JSON"
					},
					{
						"name": "data",
						"in": "body",
						"description": "An object of model property name/value pairs",
						"required": false,
						"schema": {
							"description": "An object of model property name/value pairs",
							"$ref": "#/definitions/Connection"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/Connection"
						}
					}
				},
				"deprecated": false
			}
		},
		"/connections/{id}/replace": {
			"post": {
				"tags": [
					"Connection"
				],
				"summary": "replaceById - Replace attributes for a model instance and persist it into the data source.",
				"operationId": "Connection.replaceById",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Model id",
						"required": true,
						"type": "string",
						"format": "JSON"
					},
					{
						"name": "data",
						"in": "body",
						"description": "Model instance data",
						"required": false,
						"schema": {
							"description": "Model instance data",
							"$ref": "#/definitions/Connection"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/Connection"
						}
					}
				},
				"deprecated": false
			}
		},
		"/connections/findOne": {
			"get": {
				"tags": [
					"Connection"
				],
				"summary": "findOne - Find first instance of the model matched by filter from the data source.",
				"operationId": "Connection.findOne",
				"parameters": [
					{
						"name": "filter",
						"in": "query",
						"description": "Filter defining fields, where, include, order, offset, and limit",
						"required": false,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/Connection"
						}
					}
				},
				"deprecated": false
			}
		},
		"/connections/count": {
			"get": {
				"tags": [
					"Connection"
				],
				"summary": "count - Count instances of the model matched by where from the data source.",
				"operationId": "Connection.count",
				"parameters": [
					{
						"name": "where",
						"in": "query",
						"description": "Criteria to match model instances",
						"required": false,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"type": "object",
							"properties": {
								"count": {
									"type": "number",
									"format": "double"
								}
							}
						}
					}
				},
				"deprecated": false
			}
		},
		"/connections/{id}/resources": {
			"get": {
				"tags": [
					"Connection"
				],
				"summary": "discoverResources - Discover all resources from connection database or service",
				"operationId": "Connection.discoverResources",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "The id of the connection",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"type": "array",
							"items": {
								"$ref": "#/definitions/x-any"
							}
						}
					}
				},
				"deprecated": false
			}
		},
		"/connections/{id}/resources/{name}/schemas": {
			"get": {
				"tags": [
					"Connection"
				],
				"summary": "discoverSchemas - Discover schemas for the resource of the connection",
				"operationId": "Connection.discoverSchemas",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "The id of the connection",
						"required": true,
						"type": "string"
					},
					{
						"name": "name",
						"in": "path",
						"description": "Resource name",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"type": "array",
							"items": {
								"$ref": "#/definitions/x-any"
							}
						}
					}
				},
				"deprecated": false
			}
		},
		"/me": {
			"get": {
				"tags": [
					"Me"
				],
				"summary": "Get current authenticated user",
				"operationId": "Me.currentUser",
				"parameters": [],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"description": "Return current authenticated user",
							"type": "object"
						}
					}
				},
				"deprecated": false
			}
		},
		"/me/tokens": {
			"get": {
				"tags": [
					"Me"
				],
				"summary": "Get all tokens",
				"operationId": "Me.tokens",
				"parameters": [],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"description": "Return all tokens",
							"type": "object",
							"properties": {
								"accessToken": {
									"type": "string"
								},
								"formioToken": {
									"type": "string"
								}
							}
						}
					}
				},
				"deprecated": false
			}
		},
		"/me/memberships/orgs": {
			"get": {
				"tags": [
					"Me"
				],
				"summary": "List your organization memberships.",
				"operationId": "Me.findOrgsMemberships",
				"parameters": [
					{
						"name": "state",
						"in": "query",
						"description": "Filter by state. Could be pending or active",
						"required": false,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"type": "array",
							"items": {
								"$ref": "#/definitions/x-any"
							}
						}
					}
				},
				"deprecated": false
			}
		},
		"/me/memberships/org/{org}": {
			"get": {
				"tags": [
					"Me"
				],
				"summary": "Get your organization membership.",
				"operationId": "Me.findOrgMembership",
				"parameters": [
					{
						"name": "org",
						"in": "path",
						"description": "The organization id",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"type": "object"
						}
					}
				},
				"deprecated": false
			},
			"patch": {
				"tags": [
					"Me"
				],
				"summary": "Update your organization membership.",
				"operationId": "Me.updateOrgMembership",
				"parameters": [
					{
						"name": "org",
						"in": "path",
						"description": "The organization id",
						"required": true,
						"type": "string"
					},
					{
						"name": "state",
						"in": "formData",
						"description": " The state that the membership should be in. Only \"active\" will be accepted.",
						"required": false,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"type": "object"
						}
					}
				},
				"deprecated": false
			}
		},
		"/me/teams": {
			"get": {
				"tags": [
					"Me"
				],
				"summary": "List user teams.",
				"operationId": "Me.findTeams",
				"parameters": [],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"type": "array",
							"items": {
								"$ref": "#/definitions/x-any"
							}
						}
					}
				},
				"deprecated": false
			}
		},
		"/me/repos": {
			"get": {
				"tags": [
					"Me"
				],
				"summary": "List user repositories.",
				"operationId": "Me.findRepos",
				"parameters": [
					{
						"name": "filter",
						"in": "query",
						"description": "Filter defining fields, where, include, order, offset, and limit",
						"required": false,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"type": "array",
							"items": {
								"$ref": "#/definitions/x-any"
							}
						}
					}
				},
				"deprecated": false
			},
			"post": {
				"tags": [
					"Me"
				],
				"summary": "Create repositories.",
				"operationId": "Me.createRepos",
				"parameters": [
					{
						"name": "data",
						"in": "formData",
						"description": "The repository data",
						"required": false,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/x-any"
						}
					}
				},
				"deprecated": false
			}
		},
		"/repos/{id}/owner": {
			"get": {
				"tags": [
					"Repo"
				],
				"summary": "Fetches belongsTo relation owner.",
				"operationId": "Repo.prototype.__get__owner",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Repo id",
						"required": true,
						"type": "string",
						"format": "JSON"
					},
					{
						"name": "refresh",
						"in": "query",
						"required": false,
						"type": "boolean"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/PersistedModel"
						}
					}
				},
				"deprecated": false
			}
		},
		"/repos/{id}/connections/{fk}": {
			"get": {
				"tags": [
					"Repo"
				],
				"summary": "Find a related item by id for connections.",
				"operationId": "Repo.prototype.__findById__connections",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Repo id",
						"required": true,
						"type": "string",
						"format": "JSON"
					},
					{
						"name": "fk",
						"in": "path",
						"description": "Foreign key for connections",
						"required": true,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/Connection"
						}
					}
				},
				"deprecated": false
			},
			"delete": {
				"tags": [
					"Repo"
				],
				"summary": "Delete a related item by id for connections.",
				"operationId": "Repo.prototype.__destroyById__connections",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Repo id",
						"required": true,
						"type": "string",
						"format": "JSON"
					},
					{
						"name": "fk",
						"in": "path",
						"description": "Foreign key for connections",
						"required": true,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"204": {
						"description": "Request was successful"
					}
				},
				"deprecated": false
			},
			"put": {
				"tags": [
					"Repo"
				],
				"summary": "Update a related item by id for connections.",
				"operationId": "Repo.prototype.__updateById__connections",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Repo id",
						"required": true,
						"type": "string",
						"format": "JSON"
					},
					{
						"name": "fk",
						"in": "path",
						"description": "Foreign key for connections",
						"required": true,
						"type": "string",
						"format": "JSON"
					},
					{
						"name": "data",
						"in": "body",
						"required": false,
						"schema": {
							"$ref": "#/definitions/Connection"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/Connection"
						}
					}
				},
				"deprecated": false
			}
		},
		"/repos/{id}/layers/{fk}": {
			"get": {
				"tags": [
					"Repo"
				],
				"summary": "Find a related item by id for layers.",
				"operationId": "Repo.prototype.__findById__layers",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Repo id",
						"required": true,
						"type": "string",
						"format": "JSON"
					},
					{
						"name": "fk",
						"in": "path",
						"description": "Foreign key for layers",
						"required": true,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/Layer"
						}
					}
				},
				"deprecated": false
			},
			"delete": {
				"tags": [
					"Repo"
				],
				"summary": "Delete a related item by id for layers.",
				"operationId": "Repo.prototype.__destroyById__layers",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Repo id",
						"required": true,
						"type": "string",
						"format": "JSON"
					},
					{
						"name": "fk",
						"in": "path",
						"description": "Foreign key for layers",
						"required": true,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"204": {
						"description": "Request was successful"
					}
				},
				"deprecated": false
			},
			"put": {
				"tags": [
					"Repo"
				],
				"summary": "Update a related item by id for layers.",
				"operationId": "Repo.prototype.__updateById__layers",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Repo id",
						"required": true,
						"type": "string",
						"format": "JSON"
					},
					{
						"name": "fk",
						"in": "path",
						"description": "Foreign key for layers",
						"required": true,
						"type": "string",
						"format": "JSON"
					},
					{
						"name": "data",
						"in": "body",
						"required": false,
						"schema": {
							"$ref": "#/definitions/Layer"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/Layer"
						}
					}
				},
				"deprecated": false
			}
		},
		"/repos/{id}/forms/{fk}": {
			"get": {
				"tags": [
					"Repo"
				],
				"summary": "Find a related item by id for forms.",
				"operationId": "Repo.prototype.__findById__forms",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Repo id",
						"required": true,
						"type": "string",
						"format": "JSON"
					},
					{
						"name": "fk",
						"in": "path",
						"description": "Foreign key for forms",
						"required": true,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/Form"
						}
					}
				},
				"deprecated": false
			},
			"delete": {
				"tags": [
					"Repo"
				],
				"summary": "Delete a related item by id for forms.",
				"operationId": "Repo.prototype.__destroyById__forms",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Repo id",
						"required": true,
						"type": "string",
						"format": "JSON"
					},
					{
						"name": "fk",
						"in": "path",
						"description": "Foreign key for forms",
						"required": true,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"204": {
						"description": "Request was successful"
					}
				},
				"deprecated": false
			},
			"put": {
				"tags": [
					"Repo"
				],
				"summary": "Update a related item by id for forms.",
				"operationId": "Repo.prototype.__updateById__forms",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Repo id",
						"required": true,
						"type": "string",
						"format": "JSON"
					},
					{
						"name": "fk",
						"in": "path",
						"description": "Foreign key for forms",
						"required": true,
						"type": "string",
						"format": "JSON"
					},
					{
						"name": "data",
						"in": "body",
						"required": false,
						"schema": {
							"$ref": "#/definitions/Form"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/Form"
						}
					}
				},
				"deprecated": false
			}
		},
		"/repos/{id}/reports/{fk}": {
			"get": {
				"tags": [
					"Repo"
				],
				"summary": "Find a related item by id for reports.",
				"operationId": "Repo.prototype.__findById__reports",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Repo id",
						"required": true,
						"type": "string",
						"format": "JSON"
					},
					{
						"name": "fk",
						"in": "path",
						"description": "Foreign key for reports",
						"required": true,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/Report"
						}
					}
				},
				"deprecated": false
			},
			"delete": {
				"tags": [
					"Repo"
				],
				"summary": "Delete a related item by id for reports.",
				"operationId": "Repo.prototype.__destroyById__reports",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Repo id",
						"required": true,
						"type": "string",
						"format": "JSON"
					},
					{
						"name": "fk",
						"in": "path",
						"description": "Foreign key for reports",
						"required": true,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"204": {
						"description": "Request was successful"
					}
				},
				"deprecated": false
			},
			"put": {
				"tags": [
					"Repo"
				],
				"summary": "Update a related item by id for reports.",
				"operationId": "Repo.prototype.__updateById__reports",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Repo id",
						"required": true,
						"type": "string",
						"format": "JSON"
					},
					{
						"name": "fk",
						"in": "path",
						"description": "Foreign key for reports",
						"required": true,
						"type": "string",
						"format": "JSON"
					},
					{
						"name": "data",
						"in": "body",
						"required": false,
						"schema": {
							"$ref": "#/definitions/Report"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/Report"
						}
					}
				},
				"deprecated": false
			}
		},
		"/repos/{id}/connections": {
			"get": {
				"tags": [
					"Repo"
				],
				"summary": "Queries connections of Repo.",
				"operationId": "Repo.prototype.__get__connections",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Repo id",
						"required": true,
						"type": "string",
						"format": "JSON"
					},
					{
						"name": "filter",
						"in": "query",
						"required": false,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"type": "array",
							"items": {
								"$ref": "#/definitions/Connection"
							}
						}
					}
				},
				"deprecated": false
			},
			"post": {
				"tags": [
					"Repo"
				],
				"summary": "Creates a new instance in connections of this model.",
				"operationId": "Repo.prototype.__create__connections",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Repo id",
						"required": true,
						"type": "string",
						"format": "JSON"
					},
					{
						"name": "data",
						"in": "body",
						"required": false,
						"schema": {
							"$ref": "#/definitions/Connection"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/Connection"
						}
					}
				},
				"deprecated": false
			},
			"delete": {
				"tags": [
					"Repo"
				],
				"summary": "Deletes all connections of this model.",
				"operationId": "Repo.prototype.__delete__connections",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Repo id",
						"required": true,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"204": {
						"description": "Request was successful"
					}
				},
				"deprecated": false
			}
		},
		"/repos/{id}/connections/count": {
			"get": {
				"tags": [
					"Repo"
				],
				"summary": "Counts connections of Repo.",
				"operationId": "Repo.prototype.__count__connections",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Repo id",
						"required": true,
						"type": "string",
						"format": "JSON"
					},
					{
						"name": "where",
						"in": "query",
						"description": "Criteria to match model instances",
						"required": false,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"type": "object",
							"properties": {
								"count": {
									"type": "number",
									"format": "double"
								}
							}
						}
					}
				},
				"deprecated": false
			}
		},
		"/repos/{id}/layers": {
			"get": {
				"tags": [
					"Repo"
				],
				"summary": "Queries layers of Repo.",
				"operationId": "Repo.prototype.__get__layers",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Repo id",
						"required": true,
						"type": "string",
						"format": "JSON"
					},
					{
						"name": "filter",
						"in": "query",
						"required": false,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"type": "array",
							"items": {
								"$ref": "#/definitions/Layer"
							}
						}
					}
				},
				"deprecated": false
			},
			"post": {
				"tags": [
					"Repo"
				],
				"summary": "Creates a new instance in layers of this model.",
				"operationId": "Repo.prototype.__create__layers",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Repo id",
						"required": true,
						"type": "string",
						"format": "JSON"
					},
					{
						"name": "data",
						"in": "body",
						"required": false,
						"schema": {
							"$ref": "#/definitions/Layer"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/Layer"
						}
					}
				},
				"deprecated": false
			},
			"delete": {
				"tags": [
					"Repo"
				],
				"summary": "Deletes all layers of this model.",
				"operationId": "Repo.prototype.__delete__layers",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Repo id",
						"required": true,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"204": {
						"description": "Request was successful"
					}
				},
				"deprecated": false
			}
		},
		"/repos/{id}/layers/count": {
			"get": {
				"tags": [
					"Repo"
				],
				"summary": "Counts layers of Repo.",
				"operationId": "Repo.prototype.__count__layers",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Repo id",
						"required": true,
						"type": "string",
						"format": "JSON"
					},
					{
						"name": "where",
						"in": "query",
						"description": "Criteria to match model instances",
						"required": false,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"type": "object",
							"properties": {
								"count": {
									"type": "number",
									"format": "double"
								}
							}
						}
					}
				},
				"deprecated": false
			}
		},
		"/repos/{id}/forms": {
			"get": {
				"tags": [
					"Repo"
				],
				"summary": "Queries forms of Repo.",
				"operationId": "Repo.prototype.__get__forms",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Repo id",
						"required": true,
						"type": "string",
						"format": "JSON"
					},
					{
						"name": "filter",
						"in": "query",
						"required": false,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"type": "array",
							"items": {
								"$ref": "#/definitions/Form"
							}
						}
					}
				},
				"deprecated": false
			},
			"post": {
				"tags": [
					"Repo"
				],
				"summary": "Creates a new instance in forms of this model.",
				"operationId": "Repo.prototype.__create__forms",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Repo id",
						"required": true,
						"type": "string",
						"format": "JSON"
					},
					{
						"name": "data",
						"in": "body",
						"required": false,
						"schema": {
							"$ref": "#/definitions/Form"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/Form"
						}
					}
				},
				"deprecated": false
			},
			"delete": {
				"tags": [
					"Repo"
				],
				"summary": "Deletes all forms of this model.",
				"operationId": "Repo.prototype.__delete__forms",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Repo id",
						"required": true,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"204": {
						"description": "Request was successful"
					}
				},
				"deprecated": false
			}
		},
		"/repos/{id}/forms/count": {
			"get": {
				"tags": [
					"Repo"
				],
				"summary": "Counts forms of Repo.",
				"operationId": "Repo.prototype.__count__forms",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Repo id",
						"required": true,
						"type": "string",
						"format": "JSON"
					},
					{
						"name": "where",
						"in": "query",
						"description": "Criteria to match model instances",
						"required": false,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"type": "object",
							"properties": {
								"count": {
									"type": "number",
									"format": "double"
								}
							}
						}
					}
				},
				"deprecated": false
			}
		},
		"/repos/{id}/reports": {
			"get": {
				"tags": [
					"Repo"
				],
				"summary": "Queries reports of Repo.",
				"operationId": "Repo.prototype.__get__reports",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Repo id",
						"required": true,
						"type": "string",
						"format": "JSON"
					},
					{
						"name": "filter",
						"in": "query",
						"required": false,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"type": "array",
							"items": {
								"$ref": "#/definitions/Report"
							}
						}
					}
				},
				"deprecated": false
			},
			"post": {
				"tags": [
					"Repo"
				],
				"summary": "Creates a new instance in reports of this model.",
				"operationId": "Repo.prototype.__create__reports",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Repo id",
						"required": true,
						"type": "string",
						"format": "JSON"
					},
					{
						"name": "data",
						"in": "body",
						"required": false,
						"schema": {
							"$ref": "#/definitions/Report"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/Report"
						}
					}
				},
				"deprecated": false
			},
			"delete": {
				"tags": [
					"Repo"
				],
				"summary": "Deletes all reports of this model.",
				"operationId": "Repo.prototype.__delete__reports",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Repo id",
						"required": true,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"204": {
						"description": "Request was successful"
					}
				},
				"deprecated": false
			}
		},
		"/repos/{id}/reports/count": {
			"get": {
				"tags": [
					"Repo"
				],
				"summary": "Counts reports of Repo.",
				"operationId": "Repo.prototype.__count__reports",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Repo id",
						"required": true,
						"type": "string",
						"format": "JSON"
					},
					{
						"name": "where",
						"in": "query",
						"description": "Criteria to match model instances",
						"required": false,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"type": "object",
							"properties": {
								"count": {
									"type": "number",
									"format": "double"
								}
							}
						}
					}
				},
				"deprecated": false
			}
		},
		"/repos": {
			"patch": {
				"tags": [
					"Repo"
				],
				"summary": "Patch an existing model instance or insert a new one into the data source.",
				"operationId": "Repo.patchOrCreate",
				"parameters": [
					{
						"name": "data",
						"in": "body",
						"description": "Model instance data",
						"required": false,
						"schema": {
							"description": "Model instance data",
							"$ref": "#/definitions/Repo"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/Repo"
						}
					}
				},
				"deprecated": false
			},
			"get": {
				"tags": [
					"Repo"
				],
				"summary": "Find all instances of the model matched by filter from the data source.",
				"operationId": "Repo.find",
				"parameters": [
					{
						"name": "filter",
						"in": "query",
						"description": "Filter defining fields, where, include, order, offset, and limit",
						"required": false,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"type": "array",
							"items": {
								"$ref": "#/definitions/Repo"
							}
						}
					}
				},
				"deprecated": false
			}
		},
		"/repos/{id}/exists": {
			"get": {
				"tags": [
					"Repo"
				],
				"summary": "Check whether a model instance exists in the data source.",
				"operationId": "Repo.exists__get_repos_{id}_exists",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Model id",
						"required": true,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"type": "object",
							"properties": {
								"exists": {
									"type": "boolean"
								}
							}
						}
					}
				},
				"deprecated": false
			}
		},
		"/repos/{id}": {
			"head": {
				"tags": [
					"Repo"
				],
				"summary": "Check whether a model instance exists in the data source.",
				"operationId": "Repo.exists__head_repos_{id}",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Model id",
						"required": true,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"type": "object",
							"properties": {
								"exists": {
									"type": "boolean"
								}
							}
						}
					}
				},
				"deprecated": false
			},
			"get": {
				"tags": [
					"Repo"
				],
				"summary": "Find a model instance by {{id}} from the data source.",
				"operationId": "Repo.findById",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Model id",
						"required": true,
						"type": "string",
						"format": "JSON"
					},
					{
						"name": "filter",
						"in": "query",
						"description": "Filter defining fields and include",
						"required": false,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/Repo"
						}
					}
				},
				"deprecated": false
			},
			"put": {
				"tags": [
					"Repo"
				],
				"summary": "Replace attributes for a model instance and persist it into the data source.",
				"operationId": "Repo.replaceById__put_repos_{id}",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Model id",
						"required": true,
						"type": "string",
						"format": "JSON"
					},
					{
						"name": "data",
						"in": "body",
						"description": "Model instance data",
						"required": false,
						"schema": {
							"description": "Model instance data",
							"$ref": "#/definitions/Repo"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/Repo"
						}
					}
				},
				"deprecated": false
			},
			"delete": {
				"tags": [
					"Repo"
				],
				"summary": "Delete a model instance by {{id}} from the data source.",
				"operationId": "Repo.deleteById",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Model id",
						"required": true,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"type": "object"
						}
					}
				},
				"deprecated": false
			},
			"patch": {
				"tags": [
					"Repo"
				],
				"summary": "Patch attributes for a model instance and persist it into the data source.",
				"operationId": "Repo.prototype.patchAttributes",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Repo id",
						"required": true,
						"type": "string",
						"format": "JSON"
					},
					{
						"name": "data",
						"in": "body",
						"description": "An object of model property name/value pairs",
						"required": false,
						"schema": {
							"description": "An object of model property name/value pairs",
							"$ref": "#/definitions/Repo"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/Repo"
						}
					}
				},
				"deprecated": false
			}
		},
		"/repos/{id}/replace": {
			"post": {
				"tags": [
					"Repo"
				],
				"summary": "Replace attributes for a model instance and persist it into the data source.",
				"operationId": "Repo.replaceById__post_repos_{id}_replace",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Model id",
						"required": true,
						"type": "string",
						"format": "JSON"
					},
					{
						"name": "data",
						"in": "body",
						"description": "Model instance data",
						"required": false,
						"schema": {
							"description": "Model instance data",
							"$ref": "#/definitions/Repo"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/Repo"
						}
					}
				},
				"deprecated": false
			}
		},
		"/repos/findOne": {
			"get": {
				"tags": [
					"Repo"
				],
				"summary": "Find first instance of the model matched by filter from the data source.",
				"operationId": "Repo.findOne",
				"parameters": [
					{
						"name": "filter",
						"in": "query",
						"description": "Filter defining fields, where, include, order, offset, and limit",
						"required": false,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/Repo"
						}
					}
				},
				"deprecated": false
			}
		},
		"/repos/count": {
			"get": {
				"tags": [
					"Repo"
				],
				"summary": "Count instances of the model matched by where from the data source.",
				"operationId": "Repo.count",
				"parameters": [
					{
						"name": "where",
						"in": "query",
						"description": "Criteria to match model instances",
						"required": false,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"type": "object",
							"properties": {
								"count": {
									"type": "number",
									"format": "double"
								}
							}
						}
					}
				},
				"deprecated": false
			}
		},
		"/repos/{owner}/{repo}": {
			"get": {
				"tags": [
					"Repo"
				],
				"summary": "Get a repository",
				"operationId": "Repo.get",
				"parameters": [
					{
						"name": "owner",
						"in": "path",
						"description": "Owner id or name",
						"required": true,
						"type": "string"
					},
					{
						"name": "repo",
						"in": "path",
						"description": "Repository id or name",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"type": "object"
						}
					}
				},
				"deprecated": false
			},
			"patch": {
				"tags": [
					"Repo"
				],
				"summary": "Update a repository",
				"operationId": "Repo.edit",
				"parameters": [
					{
						"name": "owner",
						"in": "path",
						"description": "Owner id or name",
						"required": true,
						"type": "string"
					},
					{
						"name": "repo",
						"in": "path",
						"description": "Repository id or name",
						"required": true,
						"type": "string"
					},
					{
						"name": "data",
						"in": "formData",
						"description": "Repository properties",
						"required": true,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"type": "object"
						}
					}
				},
				"deprecated": false
			},
			"delete": {
				"tags": [
					"Repo"
				],
				"summary": "Delete a repository",
				"operationId": "Repo.delete",
				"parameters": [
					{
						"name": "owner",
						"in": "path",
						"description": "Owner id or name",
						"required": true,
						"type": "string"
					},
					{
						"name": "repo",
						"in": "path",
						"description": "Repository id or name",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"type": "object"
						}
					}
				},
				"deprecated": false
			}
		},
		"/Namespaces/{id}/owner": {
			"get": {
				"tags": [
					"Namespace"
				],
				"summary": "Fetches belongsTo relation owner.",
				"operationId": "Namespace.prototype.__get__owner",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Namespace id",
						"required": true,
						"type": "string",
						"format": "JSON"
					},
					{
						"name": "refresh",
						"in": "query",
						"required": false,
						"type": "boolean"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/PersistedModel"
						}
					}
				},
				"deprecated": false
			}
		},
		"/Namespaces": {
			"patch": {
				"tags": [
					"Namespace"
				],
				"summary": "Patch an existing model instance or insert a new one into the data source.",
				"operationId": "Namespace.patchOrCreate",
				"parameters": [
					{
						"name": "data",
						"in": "body",
						"description": "Model instance data",
						"required": false,
						"schema": {
							"description": "Model instance data",
							"$ref": "#/definitions/Namespace"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/Namespace"
						}
					}
				},
				"deprecated": false
			},
			"get": {
				"tags": [
					"Namespace"
				],
				"summary": "Find all instances of the model matched by filter from the data source.",
				"operationId": "Namespace.find",
				"parameters": [
					{
						"name": "filter",
						"in": "query",
						"description": "Filter defining fields, where, include, order, offset, and limit",
						"required": false,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"type": "array",
							"items": {
								"$ref": "#/definitions/Namespace"
							}
						}
					}
				},
				"deprecated": false
			}
		},
		"/Namespaces/{id}/exists": {
			"get": {
				"tags": [
					"Namespace"
				],
				"summary": "Check whether a model instance exists in the data source.",
				"operationId": "Namespace.exists__get_Namespaces_{id}_exists",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Model id",
						"required": true,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"type": "object",
							"properties": {
								"exists": {
									"type": "boolean"
								}
							}
						}
					}
				},
				"deprecated": false
			}
		},
		"/Namespaces/{id}": {
			"head": {
				"tags": [
					"Namespace"
				],
				"summary": "Check whether a model instance exists in the data source.",
				"operationId": "Namespace.exists__head_Namespaces_{id}",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Model id",
						"required": true,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"type": "object",
							"properties": {
								"exists": {
									"type": "boolean"
								}
							}
						}
					}
				},
				"deprecated": false
			},
			"get": {
				"tags": [
					"Namespace"
				],
				"summary": "Find a model instance by {{id}} from the data source.",
				"operationId": "Namespace.findById",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Model id",
						"required": true,
						"type": "string",
						"format": "JSON"
					},
					{
						"name": "filter",
						"in": "query",
						"description": "Filter defining fields and include",
						"required": false,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/Namespace"
						}
					}
				},
				"deprecated": false
			},
			"delete": {
				"tags": [
					"Namespace"
				],
				"summary": "Delete a model instance by {{id}} from the data source.",
				"operationId": "Namespace.deleteById",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Model id",
						"required": true,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"type": "object"
						}
					}
				},
				"deprecated": false
			},
			"patch": {
				"tags": [
					"Namespace"
				],
				"summary": "Patch attributes for a model instance and persist it into the data source.",
				"operationId": "Namespace.prototype.patchAttributes",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Namespace id",
						"required": true,
						"type": "string",
						"format": "JSON"
					},
					{
						"name": "data",
						"in": "body",
						"description": "An object of model property name/value pairs",
						"required": false,
						"schema": {
							"description": "An object of model property name/value pairs",
							"$ref": "#/definitions/Namespace"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/Namespace"
						}
					}
				},
				"deprecated": false
			}
		},
		"/Namespaces/findOne": {
			"get": {
				"tags": [
					"Namespace"
				],
				"summary": "Find first instance of the model matched by filter from the data source.",
				"operationId": "Namespace.findOne",
				"parameters": [
					{
						"name": "filter",
						"in": "query",
						"description": "Filter defining fields, where, include, order, offset, and limit",
						"required": false,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/Namespace"
						}
					}
				},
				"deprecated": false
			}
		},
		"/Namespaces/count": {
			"get": {
				"tags": [
					"Namespace"
				],
				"summary": "Count instances of the model matched by where from the data source.",
				"operationId": "Namespace.count",
				"parameters": [
					{
						"name": "where",
						"in": "query",
						"description": "Criteria to match model instances",
						"required": false,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"type": "object",
							"properties": {
								"count": {
									"type": "number",
									"format": "double"
								}
							}
						}
					}
				},
				"deprecated": false
			}
		}
	},
	"tags": [
		{
			"name": "Auth"
		},
		{
			"name": "Roles"
		},
		{
			"name": "Account"
		},
		{
			"name": "Org"
		},
		{
			"name": "Form"
		},
		{
			"name": "Team"
		},
		{
			"name": "Page"
		},
		{
			"name": "Report"
		},
		{
			"name": "Layer"
		},
		{
			"name": "Connection"
		},
		{
			"name": "Me"
		},
		{
			"name": "Repo"
		},
		{
			"name": "Namespace"
		}
	],
	"consumes": [
		"application/json",
		"application/x-www-form-urlencoded",
		"application/xml",
		"text/xml"
	],
	"produces": [
		"application/json",
		"application/xml",
		"text/xml",
		"application/javascript",
		"text/javascript"
	],
	"definitions": {
		"x-any": {
			"properties": {}
		},
		"AccessToken": {
			"properties": {
				"id": {
					"type": "string"
				},
				"ttl": {
					"default": 1209600,
					"description": "time to live in seconds (2 weeks by default)",
					"type": "number",
					"format": "double"
				},
				"created": {
					"type": "string",
					"format": "date-time"
				},
				"userId": {
					"type": "string"
				}
			},
			"required": [
				"id"
			],
			"additionalProperties": false
		},
		"Repo": {
			"properties": {
				"id": {
					"type": "string"
				},
				"name": {
					"type": "string"
				},
				"description": {
					"type": "string"
				},
				"private": {
					"default": true,
					"type": "boolean"
				},
				"ownerId": {
					"type": "string"
				},
				"ownerType": {
					"type": "string"
				},
				"createdAt": {
					"type": "string",
					"format": "date-time"
				},
				"updatedAt": {
					"type": "string",
					"format": "date-time"
				}
			},
			"required": [
				"id",
				"name",
				"createdAt",
				"updatedAt"
			],
			"additionalProperties": false
		},
		"Namespace": {
			"properties": {
				"id": {
					"type": "string"
				},
				"name": {
					"type": "string"
				},
				"description": {
					"default": "",
					"type": "string"
				},
				"avatar": {
					"type": "string"
				},
				"ownerId": {
					"type": "string"
				},
				"ownerType": {
					"type": "string"
				},
				"createdAt": {
					"type": "string",
					"format": "date-time"
				},
				"updatedAt": {
					"type": "string",
					"format": "date-time"
				}
			},
			"required": [
				"id",
				"name",
				"createdAt",
				"updatedAt"
			],
			"additionalProperties": false
		},
		"Account": {
			"properties": {
				"id": {
					"type": "string"
				},
				"username": {
					"type": "string"
				},
				"email": {
					"type": "string"
				},
				"mobile": {
					"type": "string"
				},
				"fullname": {
					"type": "string"
				},
				"gender": {
					"type": "string"
				},
				"birthday": {
					"type": "string",
					"format": "date-time"
				},
				"profile": {
					"type": "object"
				},
				"enabled": {
					"default": true,
					"type": "boolean"
				},
				"realm": {
					"type": "string"
				},
				"emailVerified": {
					"type": "boolean"
				},
				"avatar": {
					"type": "string"
				}
			},
			"required": [
				"id"
			],
			"additionalProperties": false
		},
		"Team": {
			"properties": {
				"id": {
					"type": "string"
				},
				"name": {
					"type": "string"
				},
				"orgId": {
					"type": "string"
				},
				"enabled": {
					"default": true,
					"type": "boolean"
				},
				"avatar": {
					"type": "string"
				},
				"createdAt": {
					"type": "string",
					"format": "date-time"
				},
				"updatedAt": {
					"type": "string",
					"format": "date-time"
				}
			},
			"required": [
				"id",
				"name",
				"orgId",
				"createdAt",
				"updatedAt"
			],
			"additionalProperties": false
		},
		"Org": {
			"properties": {
				"id": {
					"type": "string"
				},
				"name": {
					"type": "string"
				},
				"enabled": {
					"default": true,
					"type": "boolean"
				},
				"avatar": {
					"type": "string"
				},
				"createdAt": {
					"type": "string",
					"format": "date-time"
				},
				"updatedAt": {
					"type": "string",
					"format": "date-time"
				}
			},
			"required": [
				"id",
				"name",
				"createdAt",
				"updatedAt"
			],
			"additionalProperties": false
		},
		"PersistedModel": {
			"properties": {
				"id": {
					"type": "number",
					"format": "double"
				}
			},
			"additionalProperties": false
		},
		"Form": {
			"properties": {
				"id": {
					"type": "string"
				},
				"name": {
					"type": "string"
				},
				"definition": {
					"type": "object"
				},
				"ownerId": {
					"type": "string"
				},
				"ownerType": {
					"type": "string"
				},
				"createdAt": {
					"type": "string",
					"format": "date-time"
				},
				"updatedAt": {
					"type": "string",
					"format": "date-time"
				},
				"repoId": {
					"type": "string"
				}
			},
			"required": [
				"id",
				"createdAt",
				"updatedAt"
			],
			"additionalProperties": false
		},
		"Page": {
			"properties": {
				"id": {
					"type": "string"
				},
				"orgId": {
					"type": "string"
				},
				"name": {
					"type": "string"
				},
				"type": {
					"type": "string"
				},
				"description": {
					"type": "string"
				},
				"items": {
					"type": "object"
				},
				"public": {
					"type": "boolean"
				},
				"ownerId": {
					"type": "string"
				},
				"ownerType": {
					"type": "string"
				},
				"createdAt": {
					"type": "string",
					"format": "date-time"
				},
				"updatedAt": {
					"type": "string",
					"format": "date-time"
				},
				"repoId": {
					"type": "string"
				}
			},
			"required": [
				"id",
				"name",
				"createdAt",
				"updatedAt"
			],
			"additionalProperties": false
		},
		"Report": {
			"properties": {
				"id": {
					"type": "string"
				},
				"name": {
					"type": "string"
				},
				"title": {
					"type": "string"
				},
				"description": {
					"type": "string"
				},
				"scope": {
					"enum": [
						"org",
						"team",
						"account"
					],
					"type": "string"
				},
				"type": {
					"type": "string"
				},
				"subtype": {
					"type": "string"
				},
				"properties": {
					"type": "object"
				},
				"query": {
					"$ref": "#/definitions/x-any"
				},
				"history": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/x-any"
					}
				},
				"published": {
					"type": "string",
					"format": "date-time"
				},
				"public": {
					"type": "boolean"
				},
				"ownerId": {
					"type": "string"
				},
				"ownerType": {
					"type": "string"
				},
				"createdAt": {
					"type": "string",
					"format": "date-time"
				},
				"updatedAt": {
					"type": "string",
					"format": "date-time"
				},
				"repoId": {
					"type": "string"
				}
			},
			"required": [
				"id",
				"name",
				"createdAt",
				"updatedAt"
			],
			"additionalProperties": false
		},
		"Layer": {
			"properties": {
				"id": {
					"type": "string"
				},
				"name": {
					"type": "string"
				},
				"description": {
					"type": "string"
				},
				"status": {
					"default": "active",
					"type": "string"
				},
				"fields": {
					"type": "array",
					"items": {
						"type": "object"
					}
				},
				"schema": {
					"type": "object"
				},
				"ownerId": {
					"type": "string"
				},
				"ownerType": {
					"type": "string"
				},
				"createdAt": {
					"type": "string",
					"format": "date-time"
				},
				"updatedAt": {
					"type": "string",
					"format": "date-time"
				},
				"repoId": {
					"type": "string"
				}
			},
			"required": [
				"id",
				"name",
				"status",
				"createdAt",
				"updatedAt"
			],
			"additionalProperties": false
		},
		"LayerField": {
			"properties": {
				"name": {
					"type": "string"
				},
				"label": {
					"type": "string"
				},
				"tags": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"type": {
					"type": "string"
				},
				"format": {
					"type": "string"
				},
				"lookup": {
					"$ref": "#/definitions/x-any"
				},
				"values": {
					"type": "array",
					"items": {
						"type": "object"
					}
				},
				"expression": {
					"type": "string"
				},
				"resourceId": {
					"type": "string"
				},
				"columnName": {
					"type": "string"
				}
			},
			"required": [
				"name"
			],
			"additionalProperties": false
		},
		"LayerSchema": {
			"properties": {
				"resources": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/LayerResource"
					}
				},
				"joins": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/LayerResource"
					}
				},
				"id": {
					"type": "number",
					"format": "double"
				}
			},
			"additionalProperties": false
		},
		"Connection": {
			"properties": {
				"id": {
					"type": "string"
				},
				"name": {
					"type": "string"
				},
				"service": {
					"type": "string"
				},
				"settings": {
					"type": "object"
				},
				"ownerId": {
					"type": "string"
				},
				"ownerType": {
					"type": "string"
				},
				"createdAt": {
					"type": "string",
					"format": "date-time"
				},
				"updatedAt": {
					"type": "string",
					"format": "date-time"
				},
				"repoId": {
					"type": "string"
				}
			},
			"required": [
				"id",
				"name",
				"service",
				"createdAt",
				"updatedAt"
			],
			"additionalProperties": false
		},
		"LayerResource": {
			"properties": {
				"id": {
					"type": "string"
				},
				"connectionId": {
					"type": "string"
				},
				"name": {
					"type": "string"
				},
				"label": {
					"type": "string"
				},
				"columns": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/LayerResourceColumn"
					}
				}
			},
			"required": [
				"id"
			],
			"additionalProperties": false
		},
		"LayerResourceColumn": {
			"properties": {
				"name": {
					"type": "string"
				},
				"type": {
					"type": "string"
				}
			},
			"required": [
				"name"
			],
			"additionalProperties": false
		}
	}
}
